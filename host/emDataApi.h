/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef emDataApi_H
#define emDataApi_H

#include <thrift/TDispatchProcessor.h>
#include "NascenseAPI_v01d_types.h"

namespace emInterfaces {

class emDataApiIf {
 public:
  virtual ~emDataApiIf() {}
  virtual void createBuffer(std::string& _return, const int64_t length) = 0;
  virtual void destroyBuffer(const std::string& bufferName) = 0;
  virtual void getBuffer(emWaveForm& _return, const std::string& bufferName) = 0;
  virtual void setBuffer(std::string& _return, const emWaveForm& samples) = 0;
  virtual void cloneBuffer(std::string& _return, const std::string& bufferName) = 0;
  virtual void renameBuffer(const std::string& oldBufferName, const std::string& newBufferName) = 0;
  virtual void saveBuffer(const std::string& bufferName, const std::string& fileName) = 0;
  virtual void loadBuffer(std::string& _return, const std::string& fileName) = 0;
  virtual void absDifference(std::string& _return, const std::string& bufferA, const std::string& bufferB) = 0;
  virtual double sum(const std::string& bufferName) = 0;
  virtual double sumSquaredDifference(const std::string& bufferA, const std::string& bufferB) = 0;
  virtual void subtract(std::string& _return, const std::string& bufferA, const std::string& bufferB) = 0;
  virtual void add(std::string& _return, const std::string& bufferA, const std::string& bufferB) = 0;
  virtual void setValues(const std::string& bufferName, const int32_t value) = 0;
  virtual void threshold(std::string& _return, const std::string& bufferName, const int32_t thresholdValue, const int32_t maxValue, const bool invert) = 0;
  virtual void normalize(std::string& _return, const std::string& bufferName, const int32_t minValue, const int32_t maxValue) = 0;
  virtual void quantize(std::string& _return, const std::string& bufferName, const int32_t minValue, const int32_t maxValue, const int32_t levels) = 0;
  virtual void resample(std::string& _return, const std::string& bufferName, const int32_t newLength) = 0;
  virtual void medianFilter(std::string& _return, const std::string& bufferName, const int32_t fitlerSize) = 0;
};

class emDataApiIfFactory {
 public:
  typedef emDataApiIf Handler;

  virtual ~emDataApiIfFactory() {}

  virtual emDataApiIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(emDataApiIf* /* handler */) = 0;
};

class emDataApiIfSingletonFactory : virtual public emDataApiIfFactory {
 public:
  emDataApiIfSingletonFactory(const boost::shared_ptr<emDataApiIf>& iface) : iface_(iface) {}
  virtual ~emDataApiIfSingletonFactory() {}

  virtual emDataApiIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(emDataApiIf* /* handler */) {}

 protected:
  boost::shared_ptr<emDataApiIf> iface_;
};

class emDataApiNull : virtual public emDataApiIf {
 public:
  virtual ~emDataApiNull() {}
  void createBuffer(std::string& /* _return */, const int64_t /* length */) {
    return;
  }
  void destroyBuffer(const std::string& /* bufferName */) {
    return;
  }
  void getBuffer(emWaveForm& /* _return */, const std::string& /* bufferName */) {
    return;
  }
  void setBuffer(std::string& /* _return */, const emWaveForm& /* samples */) {
    return;
  }
  void cloneBuffer(std::string& /* _return */, const std::string& /* bufferName */) {
    return;
  }
  void renameBuffer(const std::string& /* oldBufferName */, const std::string& /* newBufferName */) {
    return;
  }
  void saveBuffer(const std::string& /* bufferName */, const std::string& /* fileName */) {
    return;
  }
  void loadBuffer(std::string& /* _return */, const std::string& /* fileName */) {
    return;
  }
  void absDifference(std::string& /* _return */, const std::string& /* bufferA */, const std::string& /* bufferB */) {
    return;
  }
  double sum(const std::string& /* bufferName */) {
    double _return = (double)0;
    return _return;
  }
  double sumSquaredDifference(const std::string& /* bufferA */, const std::string& /* bufferB */) {
    double _return = (double)0;
    return _return;
  }
  void subtract(std::string& /* _return */, const std::string& /* bufferA */, const std::string& /* bufferB */) {
    return;
  }
  void add(std::string& /* _return */, const std::string& /* bufferA */, const std::string& /* bufferB */) {
    return;
  }
  void setValues(const std::string& /* bufferName */, const int32_t /* value */) {
    return;
  }
  void threshold(std::string& /* _return */, const std::string& /* bufferName */, const int32_t /* thresholdValue */, const int32_t /* maxValue */, const bool /* invert */) {
    return;
  }
  void normalize(std::string& /* _return */, const std::string& /* bufferName */, const int32_t /* minValue */, const int32_t /* maxValue */) {
    return;
  }
  void quantize(std::string& /* _return */, const std::string& /* bufferName */, const int32_t /* minValue */, const int32_t /* maxValue */, const int32_t /* levels */) {
    return;
  }
  void resample(std::string& /* _return */, const std::string& /* bufferName */, const int32_t /* newLength */) {
    return;
  }
  void medianFilter(std::string& /* _return */, const std::string& /* bufferName */, const int32_t /* fitlerSize */) {
    return;
  }
};

typedef struct _emDataApi_createBuffer_args__isset {
  _emDataApi_createBuffer_args__isset() : length(false) {}
  bool length;
} _emDataApi_createBuffer_args__isset;

class emDataApi_createBuffer_args {
 public:

  emDataApi_createBuffer_args() : length(0) {
  }

  virtual ~emDataApi_createBuffer_args() throw() {}

  int64_t length;

  _emDataApi_createBuffer_args__isset __isset;

  void __set_length(const int64_t val) {
    length = val;
  }

  bool operator == (const emDataApi_createBuffer_args & rhs) const
  {
    if (!(length == rhs.length))
      return false;
    return true;
  }
  bool operator != (const emDataApi_createBuffer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emDataApi_createBuffer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class emDataApi_createBuffer_pargs {
 public:


  virtual ~emDataApi_createBuffer_pargs() throw() {}

  const int64_t* length;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emDataApi_createBuffer_result__isset {
  _emDataApi_createBuffer_result__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _emDataApi_createBuffer_result__isset;

class emDataApi_createBuffer_result {
 public:

  emDataApi_createBuffer_result() : success() {
  }

  virtual ~emDataApi_createBuffer_result() throw() {}

  std::string success;
  emException err;

  _emDataApi_createBuffer_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_err(const emException& val) {
    err = val;
  }

  bool operator == (const emDataApi_createBuffer_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const emDataApi_createBuffer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emDataApi_createBuffer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emDataApi_createBuffer_presult__isset {
  _emDataApi_createBuffer_presult__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _emDataApi_createBuffer_presult__isset;

class emDataApi_createBuffer_presult {
 public:


  virtual ~emDataApi_createBuffer_presult() throw() {}

  std::string* success;
  emException err;

  _emDataApi_createBuffer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _emDataApi_destroyBuffer_args__isset {
  _emDataApi_destroyBuffer_args__isset() : bufferName(false) {}
  bool bufferName;
} _emDataApi_destroyBuffer_args__isset;

class emDataApi_destroyBuffer_args {
 public:

  emDataApi_destroyBuffer_args() : bufferName() {
  }

  virtual ~emDataApi_destroyBuffer_args() throw() {}

  std::string bufferName;

  _emDataApi_destroyBuffer_args__isset __isset;

  void __set_bufferName(const std::string& val) {
    bufferName = val;
  }

  bool operator == (const emDataApi_destroyBuffer_args & rhs) const
  {
    if (!(bufferName == rhs.bufferName))
      return false;
    return true;
  }
  bool operator != (const emDataApi_destroyBuffer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emDataApi_destroyBuffer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class emDataApi_destroyBuffer_pargs {
 public:


  virtual ~emDataApi_destroyBuffer_pargs() throw() {}

  const std::string* bufferName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emDataApi_destroyBuffer_result__isset {
  _emDataApi_destroyBuffer_result__isset() : err(false) {}
  bool err;
} _emDataApi_destroyBuffer_result__isset;

class emDataApi_destroyBuffer_result {
 public:

  emDataApi_destroyBuffer_result() {
  }

  virtual ~emDataApi_destroyBuffer_result() throw() {}

  emException err;

  _emDataApi_destroyBuffer_result__isset __isset;

  void __set_err(const emException& val) {
    err = val;
  }

  bool operator == (const emDataApi_destroyBuffer_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const emDataApi_destroyBuffer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emDataApi_destroyBuffer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emDataApi_destroyBuffer_presult__isset {
  _emDataApi_destroyBuffer_presult__isset() : err(false) {}
  bool err;
} _emDataApi_destroyBuffer_presult__isset;

class emDataApi_destroyBuffer_presult {
 public:


  virtual ~emDataApi_destroyBuffer_presult() throw() {}

  emException err;

  _emDataApi_destroyBuffer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _emDataApi_getBuffer_args__isset {
  _emDataApi_getBuffer_args__isset() : bufferName(false) {}
  bool bufferName;
} _emDataApi_getBuffer_args__isset;

class emDataApi_getBuffer_args {
 public:

  emDataApi_getBuffer_args() : bufferName() {
  }

  virtual ~emDataApi_getBuffer_args() throw() {}

  std::string bufferName;

  _emDataApi_getBuffer_args__isset __isset;

  void __set_bufferName(const std::string& val) {
    bufferName = val;
  }

  bool operator == (const emDataApi_getBuffer_args & rhs) const
  {
    if (!(bufferName == rhs.bufferName))
      return false;
    return true;
  }
  bool operator != (const emDataApi_getBuffer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emDataApi_getBuffer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class emDataApi_getBuffer_pargs {
 public:


  virtual ~emDataApi_getBuffer_pargs() throw() {}

  const std::string* bufferName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emDataApi_getBuffer_result__isset {
  _emDataApi_getBuffer_result__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _emDataApi_getBuffer_result__isset;

class emDataApi_getBuffer_result {
 public:

  emDataApi_getBuffer_result() {
  }

  virtual ~emDataApi_getBuffer_result() throw() {}

  emWaveForm success;
  emException err;

  _emDataApi_getBuffer_result__isset __isset;

  void __set_success(const emWaveForm& val) {
    success = val;
  }

  void __set_err(const emException& val) {
    err = val;
  }

  bool operator == (const emDataApi_getBuffer_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const emDataApi_getBuffer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emDataApi_getBuffer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emDataApi_getBuffer_presult__isset {
  _emDataApi_getBuffer_presult__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _emDataApi_getBuffer_presult__isset;

class emDataApi_getBuffer_presult {
 public:


  virtual ~emDataApi_getBuffer_presult() throw() {}

  emWaveForm* success;
  emException err;

  _emDataApi_getBuffer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _emDataApi_setBuffer_args__isset {
  _emDataApi_setBuffer_args__isset() : samples(false) {}
  bool samples;
} _emDataApi_setBuffer_args__isset;

class emDataApi_setBuffer_args {
 public:

  emDataApi_setBuffer_args() {
  }

  virtual ~emDataApi_setBuffer_args() throw() {}

  emWaveForm samples;

  _emDataApi_setBuffer_args__isset __isset;

  void __set_samples(const emWaveForm& val) {
    samples = val;
  }

  bool operator == (const emDataApi_setBuffer_args & rhs) const
  {
    if (!(samples == rhs.samples))
      return false;
    return true;
  }
  bool operator != (const emDataApi_setBuffer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emDataApi_setBuffer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class emDataApi_setBuffer_pargs {
 public:


  virtual ~emDataApi_setBuffer_pargs() throw() {}

  const emWaveForm* samples;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emDataApi_setBuffer_result__isset {
  _emDataApi_setBuffer_result__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _emDataApi_setBuffer_result__isset;

class emDataApi_setBuffer_result {
 public:

  emDataApi_setBuffer_result() : success() {
  }

  virtual ~emDataApi_setBuffer_result() throw() {}

  std::string success;
  emException err;

  _emDataApi_setBuffer_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_err(const emException& val) {
    err = val;
  }

  bool operator == (const emDataApi_setBuffer_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const emDataApi_setBuffer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emDataApi_setBuffer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emDataApi_setBuffer_presult__isset {
  _emDataApi_setBuffer_presult__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _emDataApi_setBuffer_presult__isset;

class emDataApi_setBuffer_presult {
 public:


  virtual ~emDataApi_setBuffer_presult() throw() {}

  std::string* success;
  emException err;

  _emDataApi_setBuffer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _emDataApi_cloneBuffer_args__isset {
  _emDataApi_cloneBuffer_args__isset() : bufferName(false) {}
  bool bufferName;
} _emDataApi_cloneBuffer_args__isset;

class emDataApi_cloneBuffer_args {
 public:

  emDataApi_cloneBuffer_args() : bufferName() {
  }

  virtual ~emDataApi_cloneBuffer_args() throw() {}

  std::string bufferName;

  _emDataApi_cloneBuffer_args__isset __isset;

  void __set_bufferName(const std::string& val) {
    bufferName = val;
  }

  bool operator == (const emDataApi_cloneBuffer_args & rhs) const
  {
    if (!(bufferName == rhs.bufferName))
      return false;
    return true;
  }
  bool operator != (const emDataApi_cloneBuffer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emDataApi_cloneBuffer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class emDataApi_cloneBuffer_pargs {
 public:


  virtual ~emDataApi_cloneBuffer_pargs() throw() {}

  const std::string* bufferName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emDataApi_cloneBuffer_result__isset {
  _emDataApi_cloneBuffer_result__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _emDataApi_cloneBuffer_result__isset;

class emDataApi_cloneBuffer_result {
 public:

  emDataApi_cloneBuffer_result() : success() {
  }

  virtual ~emDataApi_cloneBuffer_result() throw() {}

  std::string success;
  emException err;

  _emDataApi_cloneBuffer_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_err(const emException& val) {
    err = val;
  }

  bool operator == (const emDataApi_cloneBuffer_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const emDataApi_cloneBuffer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emDataApi_cloneBuffer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emDataApi_cloneBuffer_presult__isset {
  _emDataApi_cloneBuffer_presult__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _emDataApi_cloneBuffer_presult__isset;

class emDataApi_cloneBuffer_presult {
 public:


  virtual ~emDataApi_cloneBuffer_presult() throw() {}

  std::string* success;
  emException err;

  _emDataApi_cloneBuffer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _emDataApi_renameBuffer_args__isset {
  _emDataApi_renameBuffer_args__isset() : oldBufferName(false), newBufferName(false) {}
  bool oldBufferName;
  bool newBufferName;
} _emDataApi_renameBuffer_args__isset;

class emDataApi_renameBuffer_args {
 public:

  emDataApi_renameBuffer_args() : oldBufferName(), newBufferName() {
  }

  virtual ~emDataApi_renameBuffer_args() throw() {}

  std::string oldBufferName;
  std::string newBufferName;

  _emDataApi_renameBuffer_args__isset __isset;

  void __set_oldBufferName(const std::string& val) {
    oldBufferName = val;
  }

  void __set_newBufferName(const std::string& val) {
    newBufferName = val;
  }

  bool operator == (const emDataApi_renameBuffer_args & rhs) const
  {
    if (!(oldBufferName == rhs.oldBufferName))
      return false;
    if (!(newBufferName == rhs.newBufferName))
      return false;
    return true;
  }
  bool operator != (const emDataApi_renameBuffer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emDataApi_renameBuffer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class emDataApi_renameBuffer_pargs {
 public:


  virtual ~emDataApi_renameBuffer_pargs() throw() {}

  const std::string* oldBufferName;
  const std::string* newBufferName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emDataApi_renameBuffer_result__isset {
  _emDataApi_renameBuffer_result__isset() : err(false) {}
  bool err;
} _emDataApi_renameBuffer_result__isset;

class emDataApi_renameBuffer_result {
 public:

  emDataApi_renameBuffer_result() {
  }

  virtual ~emDataApi_renameBuffer_result() throw() {}

  emException err;

  _emDataApi_renameBuffer_result__isset __isset;

  void __set_err(const emException& val) {
    err = val;
  }

  bool operator == (const emDataApi_renameBuffer_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const emDataApi_renameBuffer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emDataApi_renameBuffer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emDataApi_renameBuffer_presult__isset {
  _emDataApi_renameBuffer_presult__isset() : err(false) {}
  bool err;
} _emDataApi_renameBuffer_presult__isset;

class emDataApi_renameBuffer_presult {
 public:


  virtual ~emDataApi_renameBuffer_presult() throw() {}

  emException err;

  _emDataApi_renameBuffer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _emDataApi_saveBuffer_args__isset {
  _emDataApi_saveBuffer_args__isset() : bufferName(false), fileName(false) {}
  bool bufferName;
  bool fileName;
} _emDataApi_saveBuffer_args__isset;

class emDataApi_saveBuffer_args {
 public:

  emDataApi_saveBuffer_args() : bufferName(), fileName() {
  }

  virtual ~emDataApi_saveBuffer_args() throw() {}

  std::string bufferName;
  std::string fileName;

  _emDataApi_saveBuffer_args__isset __isset;

  void __set_bufferName(const std::string& val) {
    bufferName = val;
  }

  void __set_fileName(const std::string& val) {
    fileName = val;
  }

  bool operator == (const emDataApi_saveBuffer_args & rhs) const
  {
    if (!(bufferName == rhs.bufferName))
      return false;
    if (!(fileName == rhs.fileName))
      return false;
    return true;
  }
  bool operator != (const emDataApi_saveBuffer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emDataApi_saveBuffer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class emDataApi_saveBuffer_pargs {
 public:


  virtual ~emDataApi_saveBuffer_pargs() throw() {}

  const std::string* bufferName;
  const std::string* fileName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emDataApi_saveBuffer_result__isset {
  _emDataApi_saveBuffer_result__isset() : err(false) {}
  bool err;
} _emDataApi_saveBuffer_result__isset;

class emDataApi_saveBuffer_result {
 public:

  emDataApi_saveBuffer_result() {
  }

  virtual ~emDataApi_saveBuffer_result() throw() {}

  emException err;

  _emDataApi_saveBuffer_result__isset __isset;

  void __set_err(const emException& val) {
    err = val;
  }

  bool operator == (const emDataApi_saveBuffer_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const emDataApi_saveBuffer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emDataApi_saveBuffer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emDataApi_saveBuffer_presult__isset {
  _emDataApi_saveBuffer_presult__isset() : err(false) {}
  bool err;
} _emDataApi_saveBuffer_presult__isset;

class emDataApi_saveBuffer_presult {
 public:


  virtual ~emDataApi_saveBuffer_presult() throw() {}

  emException err;

  _emDataApi_saveBuffer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _emDataApi_loadBuffer_args__isset {
  _emDataApi_loadBuffer_args__isset() : fileName(false) {}
  bool fileName;
} _emDataApi_loadBuffer_args__isset;

class emDataApi_loadBuffer_args {
 public:

  emDataApi_loadBuffer_args() : fileName() {
  }

  virtual ~emDataApi_loadBuffer_args() throw() {}

  std::string fileName;

  _emDataApi_loadBuffer_args__isset __isset;

  void __set_fileName(const std::string& val) {
    fileName = val;
  }

  bool operator == (const emDataApi_loadBuffer_args & rhs) const
  {
    if (!(fileName == rhs.fileName))
      return false;
    return true;
  }
  bool operator != (const emDataApi_loadBuffer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emDataApi_loadBuffer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class emDataApi_loadBuffer_pargs {
 public:


  virtual ~emDataApi_loadBuffer_pargs() throw() {}

  const std::string* fileName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emDataApi_loadBuffer_result__isset {
  _emDataApi_loadBuffer_result__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _emDataApi_loadBuffer_result__isset;

class emDataApi_loadBuffer_result {
 public:

  emDataApi_loadBuffer_result() : success() {
  }

  virtual ~emDataApi_loadBuffer_result() throw() {}

  std::string success;
  emException err;

  _emDataApi_loadBuffer_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_err(const emException& val) {
    err = val;
  }

  bool operator == (const emDataApi_loadBuffer_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const emDataApi_loadBuffer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emDataApi_loadBuffer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emDataApi_loadBuffer_presult__isset {
  _emDataApi_loadBuffer_presult__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _emDataApi_loadBuffer_presult__isset;

class emDataApi_loadBuffer_presult {
 public:


  virtual ~emDataApi_loadBuffer_presult() throw() {}

  std::string* success;
  emException err;

  _emDataApi_loadBuffer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _emDataApi_absDifference_args__isset {
  _emDataApi_absDifference_args__isset() : bufferA(false), bufferB(false) {}
  bool bufferA;
  bool bufferB;
} _emDataApi_absDifference_args__isset;

class emDataApi_absDifference_args {
 public:

  emDataApi_absDifference_args() : bufferA(), bufferB() {
  }

  virtual ~emDataApi_absDifference_args() throw() {}

  std::string bufferA;
  std::string bufferB;

  _emDataApi_absDifference_args__isset __isset;

  void __set_bufferA(const std::string& val) {
    bufferA = val;
  }

  void __set_bufferB(const std::string& val) {
    bufferB = val;
  }

  bool operator == (const emDataApi_absDifference_args & rhs) const
  {
    if (!(bufferA == rhs.bufferA))
      return false;
    if (!(bufferB == rhs.bufferB))
      return false;
    return true;
  }
  bool operator != (const emDataApi_absDifference_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emDataApi_absDifference_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class emDataApi_absDifference_pargs {
 public:


  virtual ~emDataApi_absDifference_pargs() throw() {}

  const std::string* bufferA;
  const std::string* bufferB;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emDataApi_absDifference_result__isset {
  _emDataApi_absDifference_result__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _emDataApi_absDifference_result__isset;

class emDataApi_absDifference_result {
 public:

  emDataApi_absDifference_result() : success() {
  }

  virtual ~emDataApi_absDifference_result() throw() {}

  std::string success;
  emException err;

  _emDataApi_absDifference_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_err(const emException& val) {
    err = val;
  }

  bool operator == (const emDataApi_absDifference_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const emDataApi_absDifference_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emDataApi_absDifference_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emDataApi_absDifference_presult__isset {
  _emDataApi_absDifference_presult__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _emDataApi_absDifference_presult__isset;

class emDataApi_absDifference_presult {
 public:


  virtual ~emDataApi_absDifference_presult() throw() {}

  std::string* success;
  emException err;

  _emDataApi_absDifference_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _emDataApi_sum_args__isset {
  _emDataApi_sum_args__isset() : bufferName(false) {}
  bool bufferName;
} _emDataApi_sum_args__isset;

class emDataApi_sum_args {
 public:

  emDataApi_sum_args() : bufferName() {
  }

  virtual ~emDataApi_sum_args() throw() {}

  std::string bufferName;

  _emDataApi_sum_args__isset __isset;

  void __set_bufferName(const std::string& val) {
    bufferName = val;
  }

  bool operator == (const emDataApi_sum_args & rhs) const
  {
    if (!(bufferName == rhs.bufferName))
      return false;
    return true;
  }
  bool operator != (const emDataApi_sum_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emDataApi_sum_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class emDataApi_sum_pargs {
 public:


  virtual ~emDataApi_sum_pargs() throw() {}

  const std::string* bufferName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emDataApi_sum_result__isset {
  _emDataApi_sum_result__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _emDataApi_sum_result__isset;

class emDataApi_sum_result {
 public:

  emDataApi_sum_result() : success(0) {
  }

  virtual ~emDataApi_sum_result() throw() {}

  double success;
  emException err;

  _emDataApi_sum_result__isset __isset;

  void __set_success(const double val) {
    success = val;
  }

  void __set_err(const emException& val) {
    err = val;
  }

  bool operator == (const emDataApi_sum_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const emDataApi_sum_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emDataApi_sum_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emDataApi_sum_presult__isset {
  _emDataApi_sum_presult__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _emDataApi_sum_presult__isset;

class emDataApi_sum_presult {
 public:


  virtual ~emDataApi_sum_presult() throw() {}

  double* success;
  emException err;

  _emDataApi_sum_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _emDataApi_sumSquaredDifference_args__isset {
  _emDataApi_sumSquaredDifference_args__isset() : bufferA(false), bufferB(false) {}
  bool bufferA;
  bool bufferB;
} _emDataApi_sumSquaredDifference_args__isset;

class emDataApi_sumSquaredDifference_args {
 public:

  emDataApi_sumSquaredDifference_args() : bufferA(), bufferB() {
  }

  virtual ~emDataApi_sumSquaredDifference_args() throw() {}

  std::string bufferA;
  std::string bufferB;

  _emDataApi_sumSquaredDifference_args__isset __isset;

  void __set_bufferA(const std::string& val) {
    bufferA = val;
  }

  void __set_bufferB(const std::string& val) {
    bufferB = val;
  }

  bool operator == (const emDataApi_sumSquaredDifference_args & rhs) const
  {
    if (!(bufferA == rhs.bufferA))
      return false;
    if (!(bufferB == rhs.bufferB))
      return false;
    return true;
  }
  bool operator != (const emDataApi_sumSquaredDifference_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emDataApi_sumSquaredDifference_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class emDataApi_sumSquaredDifference_pargs {
 public:


  virtual ~emDataApi_sumSquaredDifference_pargs() throw() {}

  const std::string* bufferA;
  const std::string* bufferB;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emDataApi_sumSquaredDifference_result__isset {
  _emDataApi_sumSquaredDifference_result__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _emDataApi_sumSquaredDifference_result__isset;

class emDataApi_sumSquaredDifference_result {
 public:

  emDataApi_sumSquaredDifference_result() : success(0) {
  }

  virtual ~emDataApi_sumSquaredDifference_result() throw() {}

  double success;
  emException err;

  _emDataApi_sumSquaredDifference_result__isset __isset;

  void __set_success(const double val) {
    success = val;
  }

  void __set_err(const emException& val) {
    err = val;
  }

  bool operator == (const emDataApi_sumSquaredDifference_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const emDataApi_sumSquaredDifference_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emDataApi_sumSquaredDifference_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emDataApi_sumSquaredDifference_presult__isset {
  _emDataApi_sumSquaredDifference_presult__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _emDataApi_sumSquaredDifference_presult__isset;

class emDataApi_sumSquaredDifference_presult {
 public:


  virtual ~emDataApi_sumSquaredDifference_presult() throw() {}

  double* success;
  emException err;

  _emDataApi_sumSquaredDifference_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _emDataApi_subtract_args__isset {
  _emDataApi_subtract_args__isset() : bufferA(false), bufferB(false) {}
  bool bufferA;
  bool bufferB;
} _emDataApi_subtract_args__isset;

class emDataApi_subtract_args {
 public:

  emDataApi_subtract_args() : bufferA(), bufferB() {
  }

  virtual ~emDataApi_subtract_args() throw() {}

  std::string bufferA;
  std::string bufferB;

  _emDataApi_subtract_args__isset __isset;

  void __set_bufferA(const std::string& val) {
    bufferA = val;
  }

  void __set_bufferB(const std::string& val) {
    bufferB = val;
  }

  bool operator == (const emDataApi_subtract_args & rhs) const
  {
    if (!(bufferA == rhs.bufferA))
      return false;
    if (!(bufferB == rhs.bufferB))
      return false;
    return true;
  }
  bool operator != (const emDataApi_subtract_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emDataApi_subtract_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class emDataApi_subtract_pargs {
 public:


  virtual ~emDataApi_subtract_pargs() throw() {}

  const std::string* bufferA;
  const std::string* bufferB;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emDataApi_subtract_result__isset {
  _emDataApi_subtract_result__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _emDataApi_subtract_result__isset;

class emDataApi_subtract_result {
 public:

  emDataApi_subtract_result() : success() {
  }

  virtual ~emDataApi_subtract_result() throw() {}

  std::string success;
  emException err;

  _emDataApi_subtract_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_err(const emException& val) {
    err = val;
  }

  bool operator == (const emDataApi_subtract_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const emDataApi_subtract_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emDataApi_subtract_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emDataApi_subtract_presult__isset {
  _emDataApi_subtract_presult__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _emDataApi_subtract_presult__isset;

class emDataApi_subtract_presult {
 public:


  virtual ~emDataApi_subtract_presult() throw() {}

  std::string* success;
  emException err;

  _emDataApi_subtract_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _emDataApi_add_args__isset {
  _emDataApi_add_args__isset() : bufferA(false), bufferB(false) {}
  bool bufferA;
  bool bufferB;
} _emDataApi_add_args__isset;

class emDataApi_add_args {
 public:

  emDataApi_add_args() : bufferA(), bufferB() {
  }

  virtual ~emDataApi_add_args() throw() {}

  std::string bufferA;
  std::string bufferB;

  _emDataApi_add_args__isset __isset;

  void __set_bufferA(const std::string& val) {
    bufferA = val;
  }

  void __set_bufferB(const std::string& val) {
    bufferB = val;
  }

  bool operator == (const emDataApi_add_args & rhs) const
  {
    if (!(bufferA == rhs.bufferA))
      return false;
    if (!(bufferB == rhs.bufferB))
      return false;
    return true;
  }
  bool operator != (const emDataApi_add_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emDataApi_add_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class emDataApi_add_pargs {
 public:


  virtual ~emDataApi_add_pargs() throw() {}

  const std::string* bufferA;
  const std::string* bufferB;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emDataApi_add_result__isset {
  _emDataApi_add_result__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _emDataApi_add_result__isset;

class emDataApi_add_result {
 public:

  emDataApi_add_result() : success() {
  }

  virtual ~emDataApi_add_result() throw() {}

  std::string success;
  emException err;

  _emDataApi_add_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_err(const emException& val) {
    err = val;
  }

  bool operator == (const emDataApi_add_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const emDataApi_add_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emDataApi_add_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emDataApi_add_presult__isset {
  _emDataApi_add_presult__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _emDataApi_add_presult__isset;

class emDataApi_add_presult {
 public:


  virtual ~emDataApi_add_presult() throw() {}

  std::string* success;
  emException err;

  _emDataApi_add_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _emDataApi_setValues_args__isset {
  _emDataApi_setValues_args__isset() : bufferName(false), value(false) {}
  bool bufferName;
  bool value;
} _emDataApi_setValues_args__isset;

class emDataApi_setValues_args {
 public:

  emDataApi_setValues_args() : bufferName(), value(0) {
  }

  virtual ~emDataApi_setValues_args() throw() {}

  std::string bufferName;
  int32_t value;

  _emDataApi_setValues_args__isset __isset;

  void __set_bufferName(const std::string& val) {
    bufferName = val;
  }

  void __set_value(const int32_t val) {
    value = val;
  }

  bool operator == (const emDataApi_setValues_args & rhs) const
  {
    if (!(bufferName == rhs.bufferName))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const emDataApi_setValues_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emDataApi_setValues_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class emDataApi_setValues_pargs {
 public:


  virtual ~emDataApi_setValues_pargs() throw() {}

  const std::string* bufferName;
  const int32_t* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emDataApi_setValues_result__isset {
  _emDataApi_setValues_result__isset() : err(false) {}
  bool err;
} _emDataApi_setValues_result__isset;

class emDataApi_setValues_result {
 public:

  emDataApi_setValues_result() {
  }

  virtual ~emDataApi_setValues_result() throw() {}

  emException err;

  _emDataApi_setValues_result__isset __isset;

  void __set_err(const emException& val) {
    err = val;
  }

  bool operator == (const emDataApi_setValues_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const emDataApi_setValues_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emDataApi_setValues_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emDataApi_setValues_presult__isset {
  _emDataApi_setValues_presult__isset() : err(false) {}
  bool err;
} _emDataApi_setValues_presult__isset;

class emDataApi_setValues_presult {
 public:


  virtual ~emDataApi_setValues_presult() throw() {}

  emException err;

  _emDataApi_setValues_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _emDataApi_threshold_args__isset {
  _emDataApi_threshold_args__isset() : bufferName(false), thresholdValue(false), maxValue(false), invert(false) {}
  bool bufferName;
  bool thresholdValue;
  bool maxValue;
  bool invert;
} _emDataApi_threshold_args__isset;

class emDataApi_threshold_args {
 public:

  emDataApi_threshold_args() : bufferName(), thresholdValue(0), maxValue(0), invert(0) {
  }

  virtual ~emDataApi_threshold_args() throw() {}

  std::string bufferName;
  int32_t thresholdValue;
  int32_t maxValue;
  bool invert;

  _emDataApi_threshold_args__isset __isset;

  void __set_bufferName(const std::string& val) {
    bufferName = val;
  }

  void __set_thresholdValue(const int32_t val) {
    thresholdValue = val;
  }

  void __set_maxValue(const int32_t val) {
    maxValue = val;
  }

  void __set_invert(const bool val) {
    invert = val;
  }

  bool operator == (const emDataApi_threshold_args & rhs) const
  {
    if (!(bufferName == rhs.bufferName))
      return false;
    if (!(thresholdValue == rhs.thresholdValue))
      return false;
    if (!(maxValue == rhs.maxValue))
      return false;
    if (!(invert == rhs.invert))
      return false;
    return true;
  }
  bool operator != (const emDataApi_threshold_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emDataApi_threshold_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class emDataApi_threshold_pargs {
 public:


  virtual ~emDataApi_threshold_pargs() throw() {}

  const std::string* bufferName;
  const int32_t* thresholdValue;
  const int32_t* maxValue;
  const bool* invert;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emDataApi_threshold_result__isset {
  _emDataApi_threshold_result__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _emDataApi_threshold_result__isset;

class emDataApi_threshold_result {
 public:

  emDataApi_threshold_result() : success() {
  }

  virtual ~emDataApi_threshold_result() throw() {}

  std::string success;
  emException err;

  _emDataApi_threshold_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_err(const emException& val) {
    err = val;
  }

  bool operator == (const emDataApi_threshold_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const emDataApi_threshold_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emDataApi_threshold_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emDataApi_threshold_presult__isset {
  _emDataApi_threshold_presult__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _emDataApi_threshold_presult__isset;

class emDataApi_threshold_presult {
 public:


  virtual ~emDataApi_threshold_presult() throw() {}

  std::string* success;
  emException err;

  _emDataApi_threshold_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _emDataApi_normalize_args__isset {
  _emDataApi_normalize_args__isset() : bufferName(false), minValue(false), maxValue(false) {}
  bool bufferName;
  bool minValue;
  bool maxValue;
} _emDataApi_normalize_args__isset;

class emDataApi_normalize_args {
 public:

  emDataApi_normalize_args() : bufferName(), minValue(0), maxValue(0) {
  }

  virtual ~emDataApi_normalize_args() throw() {}

  std::string bufferName;
  int32_t minValue;
  int32_t maxValue;

  _emDataApi_normalize_args__isset __isset;

  void __set_bufferName(const std::string& val) {
    bufferName = val;
  }

  void __set_minValue(const int32_t val) {
    minValue = val;
  }

  void __set_maxValue(const int32_t val) {
    maxValue = val;
  }

  bool operator == (const emDataApi_normalize_args & rhs) const
  {
    if (!(bufferName == rhs.bufferName))
      return false;
    if (!(minValue == rhs.minValue))
      return false;
    if (!(maxValue == rhs.maxValue))
      return false;
    return true;
  }
  bool operator != (const emDataApi_normalize_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emDataApi_normalize_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class emDataApi_normalize_pargs {
 public:


  virtual ~emDataApi_normalize_pargs() throw() {}

  const std::string* bufferName;
  const int32_t* minValue;
  const int32_t* maxValue;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emDataApi_normalize_result__isset {
  _emDataApi_normalize_result__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _emDataApi_normalize_result__isset;

class emDataApi_normalize_result {
 public:

  emDataApi_normalize_result() : success() {
  }

  virtual ~emDataApi_normalize_result() throw() {}

  std::string success;
  emException err;

  _emDataApi_normalize_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_err(const emException& val) {
    err = val;
  }

  bool operator == (const emDataApi_normalize_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const emDataApi_normalize_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emDataApi_normalize_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emDataApi_normalize_presult__isset {
  _emDataApi_normalize_presult__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _emDataApi_normalize_presult__isset;

class emDataApi_normalize_presult {
 public:


  virtual ~emDataApi_normalize_presult() throw() {}

  std::string* success;
  emException err;

  _emDataApi_normalize_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _emDataApi_quantize_args__isset {
  _emDataApi_quantize_args__isset() : bufferName(false), minValue(false), maxValue(false), levels(false) {}
  bool bufferName;
  bool minValue;
  bool maxValue;
  bool levels;
} _emDataApi_quantize_args__isset;

class emDataApi_quantize_args {
 public:

  emDataApi_quantize_args() : bufferName(), minValue(0), maxValue(0), levels(0) {
  }

  virtual ~emDataApi_quantize_args() throw() {}

  std::string bufferName;
  int32_t minValue;
  int32_t maxValue;
  int32_t levels;

  _emDataApi_quantize_args__isset __isset;

  void __set_bufferName(const std::string& val) {
    bufferName = val;
  }

  void __set_minValue(const int32_t val) {
    minValue = val;
  }

  void __set_maxValue(const int32_t val) {
    maxValue = val;
  }

  void __set_levels(const int32_t val) {
    levels = val;
  }

  bool operator == (const emDataApi_quantize_args & rhs) const
  {
    if (!(bufferName == rhs.bufferName))
      return false;
    if (!(minValue == rhs.minValue))
      return false;
    if (!(maxValue == rhs.maxValue))
      return false;
    if (!(levels == rhs.levels))
      return false;
    return true;
  }
  bool operator != (const emDataApi_quantize_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emDataApi_quantize_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class emDataApi_quantize_pargs {
 public:


  virtual ~emDataApi_quantize_pargs() throw() {}

  const std::string* bufferName;
  const int32_t* minValue;
  const int32_t* maxValue;
  const int32_t* levels;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emDataApi_quantize_result__isset {
  _emDataApi_quantize_result__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _emDataApi_quantize_result__isset;

class emDataApi_quantize_result {
 public:

  emDataApi_quantize_result() : success() {
  }

  virtual ~emDataApi_quantize_result() throw() {}

  std::string success;
  emException err;

  _emDataApi_quantize_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_err(const emException& val) {
    err = val;
  }

  bool operator == (const emDataApi_quantize_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const emDataApi_quantize_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emDataApi_quantize_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emDataApi_quantize_presult__isset {
  _emDataApi_quantize_presult__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _emDataApi_quantize_presult__isset;

class emDataApi_quantize_presult {
 public:


  virtual ~emDataApi_quantize_presult() throw() {}

  std::string* success;
  emException err;

  _emDataApi_quantize_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _emDataApi_resample_args__isset {
  _emDataApi_resample_args__isset() : bufferName(false), newLength(false) {}
  bool bufferName;
  bool newLength;
} _emDataApi_resample_args__isset;

class emDataApi_resample_args {
 public:

  emDataApi_resample_args() : bufferName(), newLength(0) {
  }

  virtual ~emDataApi_resample_args() throw() {}

  std::string bufferName;
  int32_t newLength;

  _emDataApi_resample_args__isset __isset;

  void __set_bufferName(const std::string& val) {
    bufferName = val;
  }

  void __set_newLength(const int32_t val) {
    newLength = val;
  }

  bool operator == (const emDataApi_resample_args & rhs) const
  {
    if (!(bufferName == rhs.bufferName))
      return false;
    if (!(newLength == rhs.newLength))
      return false;
    return true;
  }
  bool operator != (const emDataApi_resample_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emDataApi_resample_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class emDataApi_resample_pargs {
 public:


  virtual ~emDataApi_resample_pargs() throw() {}

  const std::string* bufferName;
  const int32_t* newLength;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emDataApi_resample_result__isset {
  _emDataApi_resample_result__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _emDataApi_resample_result__isset;

class emDataApi_resample_result {
 public:

  emDataApi_resample_result() : success() {
  }

  virtual ~emDataApi_resample_result() throw() {}

  std::string success;
  emException err;

  _emDataApi_resample_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_err(const emException& val) {
    err = val;
  }

  bool operator == (const emDataApi_resample_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const emDataApi_resample_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emDataApi_resample_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emDataApi_resample_presult__isset {
  _emDataApi_resample_presult__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _emDataApi_resample_presult__isset;

class emDataApi_resample_presult {
 public:


  virtual ~emDataApi_resample_presult() throw() {}

  std::string* success;
  emException err;

  _emDataApi_resample_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _emDataApi_medianFilter_args__isset {
  _emDataApi_medianFilter_args__isset() : bufferName(false), fitlerSize(false) {}
  bool bufferName;
  bool fitlerSize;
} _emDataApi_medianFilter_args__isset;

class emDataApi_medianFilter_args {
 public:

  emDataApi_medianFilter_args() : bufferName(), fitlerSize(0) {
  }

  virtual ~emDataApi_medianFilter_args() throw() {}

  std::string bufferName;
  int32_t fitlerSize;

  _emDataApi_medianFilter_args__isset __isset;

  void __set_bufferName(const std::string& val) {
    bufferName = val;
  }

  void __set_fitlerSize(const int32_t val) {
    fitlerSize = val;
  }

  bool operator == (const emDataApi_medianFilter_args & rhs) const
  {
    if (!(bufferName == rhs.bufferName))
      return false;
    if (!(fitlerSize == rhs.fitlerSize))
      return false;
    return true;
  }
  bool operator != (const emDataApi_medianFilter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emDataApi_medianFilter_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class emDataApi_medianFilter_pargs {
 public:


  virtual ~emDataApi_medianFilter_pargs() throw() {}

  const std::string* bufferName;
  const int32_t* fitlerSize;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emDataApi_medianFilter_result__isset {
  _emDataApi_medianFilter_result__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _emDataApi_medianFilter_result__isset;

class emDataApi_medianFilter_result {
 public:

  emDataApi_medianFilter_result() : success() {
  }

  virtual ~emDataApi_medianFilter_result() throw() {}

  std::string success;
  emException err;

  _emDataApi_medianFilter_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_err(const emException& val) {
    err = val;
  }

  bool operator == (const emDataApi_medianFilter_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const emDataApi_medianFilter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emDataApi_medianFilter_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emDataApi_medianFilter_presult__isset {
  _emDataApi_medianFilter_presult__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _emDataApi_medianFilter_presult__isset;

class emDataApi_medianFilter_presult {
 public:


  virtual ~emDataApi_medianFilter_presult() throw() {}

  std::string* success;
  emException err;

  _emDataApi_medianFilter_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class emDataApiClient : virtual public emDataApiIf {
 public:
  emDataApiClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  emDataApiClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void createBuffer(std::string& _return, const int64_t length);
  void send_createBuffer(const int64_t length);
  void recv_createBuffer(std::string& _return);
  void destroyBuffer(const std::string& bufferName);
  void send_destroyBuffer(const std::string& bufferName);
  void recv_destroyBuffer();
  void getBuffer(emWaveForm& _return, const std::string& bufferName);
  void send_getBuffer(const std::string& bufferName);
  void recv_getBuffer(emWaveForm& _return);
  void setBuffer(std::string& _return, const emWaveForm& samples);
  void send_setBuffer(const emWaveForm& samples);
  void recv_setBuffer(std::string& _return);
  void cloneBuffer(std::string& _return, const std::string& bufferName);
  void send_cloneBuffer(const std::string& bufferName);
  void recv_cloneBuffer(std::string& _return);
  void renameBuffer(const std::string& oldBufferName, const std::string& newBufferName);
  void send_renameBuffer(const std::string& oldBufferName, const std::string& newBufferName);
  void recv_renameBuffer();
  void saveBuffer(const std::string& bufferName, const std::string& fileName);
  void send_saveBuffer(const std::string& bufferName, const std::string& fileName);
  void recv_saveBuffer();
  void loadBuffer(std::string& _return, const std::string& fileName);
  void send_loadBuffer(const std::string& fileName);
  void recv_loadBuffer(std::string& _return);
  void absDifference(std::string& _return, const std::string& bufferA, const std::string& bufferB);
  void send_absDifference(const std::string& bufferA, const std::string& bufferB);
  void recv_absDifference(std::string& _return);
  double sum(const std::string& bufferName);
  void send_sum(const std::string& bufferName);
  double recv_sum();
  double sumSquaredDifference(const std::string& bufferA, const std::string& bufferB);
  void send_sumSquaredDifference(const std::string& bufferA, const std::string& bufferB);
  double recv_sumSquaredDifference();
  void subtract(std::string& _return, const std::string& bufferA, const std::string& bufferB);
  void send_subtract(const std::string& bufferA, const std::string& bufferB);
  void recv_subtract(std::string& _return);
  void add(std::string& _return, const std::string& bufferA, const std::string& bufferB);
  void send_add(const std::string& bufferA, const std::string& bufferB);
  void recv_add(std::string& _return);
  void setValues(const std::string& bufferName, const int32_t value);
  void send_setValues(const std::string& bufferName, const int32_t value);
  void recv_setValues();
  void threshold(std::string& _return, const std::string& bufferName, const int32_t thresholdValue, const int32_t maxValue, const bool invert);
  void send_threshold(const std::string& bufferName, const int32_t thresholdValue, const int32_t maxValue, const bool invert);
  void recv_threshold(std::string& _return);
  void normalize(std::string& _return, const std::string& bufferName, const int32_t minValue, const int32_t maxValue);
  void send_normalize(const std::string& bufferName, const int32_t minValue, const int32_t maxValue);
  void recv_normalize(std::string& _return);
  void quantize(std::string& _return, const std::string& bufferName, const int32_t minValue, const int32_t maxValue, const int32_t levels);
  void send_quantize(const std::string& bufferName, const int32_t minValue, const int32_t maxValue, const int32_t levels);
  void recv_quantize(std::string& _return);
  void resample(std::string& _return, const std::string& bufferName, const int32_t newLength);
  void send_resample(const std::string& bufferName, const int32_t newLength);
  void recv_resample(std::string& _return);
  void medianFilter(std::string& _return, const std::string& bufferName, const int32_t fitlerSize);
  void send_medianFilter(const std::string& bufferName, const int32_t fitlerSize);
  void recv_medianFilter(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class emDataApiProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<emDataApiIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (emDataApiProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_createBuffer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_destroyBuffer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getBuffer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setBuffer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_cloneBuffer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_renameBuffer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_saveBuffer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_loadBuffer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_absDifference(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sum(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sumSquaredDifference(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_subtract(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_add(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setValues(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_threshold(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_normalize(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_quantize(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_resample(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_medianFilter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  emDataApiProcessor(boost::shared_ptr<emDataApiIf> iface) :
    iface_(iface) {
    processMap_["createBuffer"] = &emDataApiProcessor::process_createBuffer;
    processMap_["destroyBuffer"] = &emDataApiProcessor::process_destroyBuffer;
    processMap_["getBuffer"] = &emDataApiProcessor::process_getBuffer;
    processMap_["setBuffer"] = &emDataApiProcessor::process_setBuffer;
    processMap_["cloneBuffer"] = &emDataApiProcessor::process_cloneBuffer;
    processMap_["renameBuffer"] = &emDataApiProcessor::process_renameBuffer;
    processMap_["saveBuffer"] = &emDataApiProcessor::process_saveBuffer;
    processMap_["loadBuffer"] = &emDataApiProcessor::process_loadBuffer;
    processMap_["absDifference"] = &emDataApiProcessor::process_absDifference;
    processMap_["sum"] = &emDataApiProcessor::process_sum;
    processMap_["sumSquaredDifference"] = &emDataApiProcessor::process_sumSquaredDifference;
    processMap_["subtract"] = &emDataApiProcessor::process_subtract;
    processMap_["add"] = &emDataApiProcessor::process_add;
    processMap_["setValues"] = &emDataApiProcessor::process_setValues;
    processMap_["threshold"] = &emDataApiProcessor::process_threshold;
    processMap_["normalize"] = &emDataApiProcessor::process_normalize;
    processMap_["quantize"] = &emDataApiProcessor::process_quantize;
    processMap_["resample"] = &emDataApiProcessor::process_resample;
    processMap_["medianFilter"] = &emDataApiProcessor::process_medianFilter;
  }

  virtual ~emDataApiProcessor() {}
};

class emDataApiProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  emDataApiProcessorFactory(const ::boost::shared_ptr< emDataApiIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< emDataApiIfFactory > handlerFactory_;
};

class emDataApiMultiface : virtual public emDataApiIf {
 public:
  emDataApiMultiface(std::vector<boost::shared_ptr<emDataApiIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~emDataApiMultiface() {}
 protected:
  std::vector<boost::shared_ptr<emDataApiIf> > ifaces_;
  emDataApiMultiface() {}
  void add(boost::shared_ptr<emDataApiIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void createBuffer(std::string& _return, const int64_t length) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createBuffer(_return, length);
    }
    ifaces_[i]->createBuffer(_return, length);
    return;
  }

  void destroyBuffer(const std::string& bufferName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->destroyBuffer(bufferName);
    }
    ifaces_[i]->destroyBuffer(bufferName);
  }

  void getBuffer(emWaveForm& _return, const std::string& bufferName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getBuffer(_return, bufferName);
    }
    ifaces_[i]->getBuffer(_return, bufferName);
    return;
  }

  void setBuffer(std::string& _return, const emWaveForm& samples) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setBuffer(_return, samples);
    }
    ifaces_[i]->setBuffer(_return, samples);
    return;
  }

  void cloneBuffer(std::string& _return, const std::string& bufferName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->cloneBuffer(_return, bufferName);
    }
    ifaces_[i]->cloneBuffer(_return, bufferName);
    return;
  }

  void renameBuffer(const std::string& oldBufferName, const std::string& newBufferName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->renameBuffer(oldBufferName, newBufferName);
    }
    ifaces_[i]->renameBuffer(oldBufferName, newBufferName);
  }

  void saveBuffer(const std::string& bufferName, const std::string& fileName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->saveBuffer(bufferName, fileName);
    }
    ifaces_[i]->saveBuffer(bufferName, fileName);
  }

  void loadBuffer(std::string& _return, const std::string& fileName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->loadBuffer(_return, fileName);
    }
    ifaces_[i]->loadBuffer(_return, fileName);
    return;
  }

  void absDifference(std::string& _return, const std::string& bufferA, const std::string& bufferB) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->absDifference(_return, bufferA, bufferB);
    }
    ifaces_[i]->absDifference(_return, bufferA, bufferB);
    return;
  }

  double sum(const std::string& bufferName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sum(bufferName);
    }
    return ifaces_[i]->sum(bufferName);
  }

  double sumSquaredDifference(const std::string& bufferA, const std::string& bufferB) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sumSquaredDifference(bufferA, bufferB);
    }
    return ifaces_[i]->sumSquaredDifference(bufferA, bufferB);
  }

  void subtract(std::string& _return, const std::string& bufferA, const std::string& bufferB) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->subtract(_return, bufferA, bufferB);
    }
    ifaces_[i]->subtract(_return, bufferA, bufferB);
    return;
  }

  void add(std::string& _return, const std::string& bufferA, const std::string& bufferB) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add(_return, bufferA, bufferB);
    }
    ifaces_[i]->add(_return, bufferA, bufferB);
    return;
  }

  void setValues(const std::string& bufferName, const int32_t value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setValues(bufferName, value);
    }
    ifaces_[i]->setValues(bufferName, value);
  }

  void threshold(std::string& _return, const std::string& bufferName, const int32_t thresholdValue, const int32_t maxValue, const bool invert) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->threshold(_return, bufferName, thresholdValue, maxValue, invert);
    }
    ifaces_[i]->threshold(_return, bufferName, thresholdValue, maxValue, invert);
    return;
  }

  void normalize(std::string& _return, const std::string& bufferName, const int32_t minValue, const int32_t maxValue) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->normalize(_return, bufferName, minValue, maxValue);
    }
    ifaces_[i]->normalize(_return, bufferName, minValue, maxValue);
    return;
  }

  void quantize(std::string& _return, const std::string& bufferName, const int32_t minValue, const int32_t maxValue, const int32_t levels) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->quantize(_return, bufferName, minValue, maxValue, levels);
    }
    ifaces_[i]->quantize(_return, bufferName, minValue, maxValue, levels);
    return;
  }

  void resample(std::string& _return, const std::string& bufferName, const int32_t newLength) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->resample(_return, bufferName, newLength);
    }
    ifaces_[i]->resample(_return, bufferName, newLength);
    return;
  }

  void medianFilter(std::string& _return, const std::string& bufferName, const int32_t fitlerSize) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->medianFilter(_return, bufferName, fitlerSize);
    }
    ifaces_[i]->medianFilter(_return, bufferName, fitlerSize);
    return;
  }

};

} // namespace

#endif
