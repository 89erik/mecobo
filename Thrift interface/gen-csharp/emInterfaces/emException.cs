/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace emInterfaces
{

  /// <summary>
  /// The device directly controlling the EM should make sure sensible things are happening, and if not throw an exception.  All methods should return problems via exceptions.  Exceptions should contain as much information as possible.  Exceptions can be fatal or non fatal. On a fatal exception, the controlling program should probably abandon what it is doing and reset.
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class emException : Exception, TBase
  {
    private int _errorCode;
    private string _Reason;
    private string _Source;
    private emExceptionType _exceptionType;

    /// <summary>
    /// Error codes, to be defined in documentation
    /// </summary>
    public int ErrorCode
    {
      get
      {
        return _errorCode;
      }
      set
      {
        __isset.errorCode = true;
        this._errorCode = value;
      }
    }

    /// <summary>
    /// Why the error was thrown
    /// </summary>
    public string Reason
    {
      get
      {
        return _Reason;
      }
      set
      {
        __isset.Reason = true;
        this._Reason = value;
      }
    }

    /// <summary>
    /// Where (e.g. module, line number) the error came from
    /// </summary>
    public string Source
    {
      get
      {
        return _Source;
      }
      set
      {
        __isset.Source = true;
        this._Source = value;
      }
    }

    /// <summary>
    /// What type of error this is
    /// 
    /// <seealso cref="emExceptionType"/>
    /// </summary>
    public emExceptionType ExceptionType
    {
      get
      {
        return _exceptionType;
      }
      set
      {
        __isset.exceptionType = true;
        this._exceptionType = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool errorCode;
      public bool Reason;
      public bool Source;
      public bool exceptionType;
    }

    public emException() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              ErrorCode = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Reason = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Source = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              ExceptionType = (emExceptionType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("emException");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.errorCode) {
        field.Name = "errorCode";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ErrorCode);
        oprot.WriteFieldEnd();
      }
      if (Reason != null && __isset.Reason) {
        field.Name = "Reason";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Reason);
        oprot.WriteFieldEnd();
      }
      if (Source != null && __isset.Source) {
        field.Name = "Source";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Source);
        oprot.WriteFieldEnd();
      }
      if (__isset.exceptionType) {
        field.Name = "exceptionType";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)ExceptionType);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("emException(");
      sb.Append("ErrorCode: ");
      sb.Append(ErrorCode);
      sb.Append(",Reason: ");
      sb.Append(Reason);
      sb.Append(",Source: ");
      sb.Append(Source);
      sb.Append(",ExceptionType: ");
      sb.Append(ExceptionType);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
