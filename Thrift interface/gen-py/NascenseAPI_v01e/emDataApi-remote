#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from NascenseAPI_v01e import emDataApi
from NascenseAPI_v01e.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  string createBuffer(i64 length)'
  print '  void destroyBuffer(string bufferName)'
  print '  emWaveForm getBuffer(string bufferName)'
  print '  string setBuffer(emWaveForm samples)'
  print '  string cloneBuffer(string bufferName)'
  print '  void renameBuffer(string oldBufferName, string newBufferName)'
  print '  void saveBuffer(string bufferName, string fileName)'
  print '  string loadBuffer(string fileName)'
  print '  string absDifference(string bufferA, string bufferB)'
  print '  double sum(string bufferName)'
  print '  double sumSquaredDifference(string bufferA, string bufferB)'
  print '  string subtract(string bufferA, string bufferB)'
  print '  string add(string bufferA, string bufferB)'
  print '  void setValues(string bufferName, i32 value)'
  print '  string threshold(string bufferName, i32 thresholdValue, i32 maxValue, bool invert)'
  print '  string normalize(string bufferName, i32 minValue, i32 maxValue)'
  print '  string quantize(string bufferName, i32 minValue, i32 maxValue, i32 levels)'
  print '  string resample(string bufferName, i32 newLength)'
  print '  string medianFilter(string bufferName, i32 fitlerSize)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = emDataApi.Client(protocol)
transport.open()

if cmd == 'createBuffer':
  if len(args) != 1:
    print 'createBuffer requires 1 args'
    sys.exit(1)
  pp.pprint(client.createBuffer(eval(args[0]),))

elif cmd == 'destroyBuffer':
  if len(args) != 1:
    print 'destroyBuffer requires 1 args'
    sys.exit(1)
  pp.pprint(client.destroyBuffer(args[0],))

elif cmd == 'getBuffer':
  if len(args) != 1:
    print 'getBuffer requires 1 args'
    sys.exit(1)
  pp.pprint(client.getBuffer(args[0],))

elif cmd == 'setBuffer':
  if len(args) != 1:
    print 'setBuffer requires 1 args'
    sys.exit(1)
  pp.pprint(client.setBuffer(eval(args[0]),))

elif cmd == 'cloneBuffer':
  if len(args) != 1:
    print 'cloneBuffer requires 1 args'
    sys.exit(1)
  pp.pprint(client.cloneBuffer(args[0],))

elif cmd == 'renameBuffer':
  if len(args) != 2:
    print 'renameBuffer requires 2 args'
    sys.exit(1)
  pp.pprint(client.renameBuffer(args[0],args[1],))

elif cmd == 'saveBuffer':
  if len(args) != 2:
    print 'saveBuffer requires 2 args'
    sys.exit(1)
  pp.pprint(client.saveBuffer(args[0],args[1],))

elif cmd == 'loadBuffer':
  if len(args) != 1:
    print 'loadBuffer requires 1 args'
    sys.exit(1)
  pp.pprint(client.loadBuffer(args[0],))

elif cmd == 'absDifference':
  if len(args) != 2:
    print 'absDifference requires 2 args'
    sys.exit(1)
  pp.pprint(client.absDifference(args[0],args[1],))

elif cmd == 'sum':
  if len(args) != 1:
    print 'sum requires 1 args'
    sys.exit(1)
  pp.pprint(client.sum(args[0],))

elif cmd == 'sumSquaredDifference':
  if len(args) != 2:
    print 'sumSquaredDifference requires 2 args'
    sys.exit(1)
  pp.pprint(client.sumSquaredDifference(args[0],args[1],))

elif cmd == 'subtract':
  if len(args) != 2:
    print 'subtract requires 2 args'
    sys.exit(1)
  pp.pprint(client.subtract(args[0],args[1],))

elif cmd == 'add':
  if len(args) != 2:
    print 'add requires 2 args'
    sys.exit(1)
  pp.pprint(client.add(args[0],args[1],))

elif cmd == 'setValues':
  if len(args) != 2:
    print 'setValues requires 2 args'
    sys.exit(1)
  pp.pprint(client.setValues(args[0],eval(args[1]),))

elif cmd == 'threshold':
  if len(args) != 4:
    print 'threshold requires 4 args'
    sys.exit(1)
  pp.pprint(client.threshold(args[0],eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'normalize':
  if len(args) != 3:
    print 'normalize requires 3 args'
    sys.exit(1)
  pp.pprint(client.normalize(args[0],eval(args[1]),eval(args[2]),))

elif cmd == 'quantize':
  if len(args) != 4:
    print 'quantize requires 4 args'
    sys.exit(1)
  pp.pprint(client.quantize(args[0],eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'resample':
  if len(args) != 2:
    print 'resample requires 2 args'
    sys.exit(1)
  pp.pprint(client.resample(args[0],eval(args[1]),))

elif cmd == 'medianFilter':
  if len(args) != 2:
    print 'medianFilter requires 2 args'
    sys.exit(1)
  pp.pprint(client.medianFilter(args[0],eval(args[1]),))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
