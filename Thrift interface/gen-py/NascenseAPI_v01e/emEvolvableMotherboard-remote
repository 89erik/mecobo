#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from NascenseAPI_v01e import emEvolvableMotherboard
from NascenseAPI_v01e.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  i32 ping()'
  print '  void setLED(i32 index, bool state)'
  print '  string getMotherboardID()'
  print '  string getMotherboardState()'
  print '  string getLastError()'
  print '  bool reset()'
  print '  bool reprogramme(string bin, i32 length)'
  print '  emDebugInfo getDebugState()'
  print '  void clearSequences()'
  print '  void runSequences()'
  print '  void stopSequences()'
  print '  void joinSequences()'
  print '  void appendSequenceAction(emSequenceItem Item)'
  print '  emWaveForm getRecording(i32 srcPin)'
  print '  void clearRecording(i32 srcPin)'
  print '  i32 getTemperature()'
  print '  void setLogServer(emLogServerSettings logServer)'
  print '  void setConfigRegister(i32 index, i32 value)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = emEvolvableMotherboard.Client(protocol)
transport.open()

if cmd == 'ping':
  if len(args) != 0:
    print 'ping requires 0 args'
    sys.exit(1)
  pp.pprint(client.ping())

elif cmd == 'setLED':
  if len(args) != 2:
    print 'setLED requires 2 args'
    sys.exit(1)
  pp.pprint(client.setLED(eval(args[0]),eval(args[1]),))

elif cmd == 'getMotherboardID':
  if len(args) != 0:
    print 'getMotherboardID requires 0 args'
    sys.exit(1)
  pp.pprint(client.getMotherboardID())

elif cmd == 'getMotherboardState':
  if len(args) != 0:
    print 'getMotherboardState requires 0 args'
    sys.exit(1)
  pp.pprint(client.getMotherboardState())

elif cmd == 'getLastError':
  if len(args) != 0:
    print 'getLastError requires 0 args'
    sys.exit(1)
  pp.pprint(client.getLastError())

elif cmd == 'reset':
  if len(args) != 0:
    print 'reset requires 0 args'
    sys.exit(1)
  pp.pprint(client.reset())

elif cmd == 'reprogramme':
  if len(args) != 2:
    print 'reprogramme requires 2 args'
    sys.exit(1)
  pp.pprint(client.reprogramme(args[0],eval(args[1]),))

elif cmd == 'getDebugState':
  if len(args) != 0:
    print 'getDebugState requires 0 args'
    sys.exit(1)
  pp.pprint(client.getDebugState())

elif cmd == 'clearSequences':
  if len(args) != 0:
    print 'clearSequences requires 0 args'
    sys.exit(1)
  pp.pprint(client.clearSequences())

elif cmd == 'runSequences':
  if len(args) != 0:
    print 'runSequences requires 0 args'
    sys.exit(1)
  pp.pprint(client.runSequences())

elif cmd == 'stopSequences':
  if len(args) != 0:
    print 'stopSequences requires 0 args'
    sys.exit(1)
  pp.pprint(client.stopSequences())

elif cmd == 'joinSequences':
  if len(args) != 0:
    print 'joinSequences requires 0 args'
    sys.exit(1)
  pp.pprint(client.joinSequences())

elif cmd == 'appendSequenceAction':
  if len(args) != 1:
    print 'appendSequenceAction requires 1 args'
    sys.exit(1)
  pp.pprint(client.appendSequenceAction(eval(args[0]),))

elif cmd == 'getRecording':
  if len(args) != 1:
    print 'getRecording requires 1 args'
    sys.exit(1)
  pp.pprint(client.getRecording(eval(args[0]),))

elif cmd == 'clearRecording':
  if len(args) != 1:
    print 'clearRecording requires 1 args'
    sys.exit(1)
  pp.pprint(client.clearRecording(eval(args[0]),))

elif cmd == 'getTemperature':
  if len(args) != 0:
    print 'getTemperature requires 0 args'
    sys.exit(1)
  pp.pprint(client.getTemperature())

elif cmd == 'setLogServer':
  if len(args) != 1:
    print 'setLogServer requires 1 args'
    sys.exit(1)
  pp.pprint(client.setLogServer(eval(args[0]),))

elif cmd == 'setConfigRegister':
  if len(args) != 2:
    print 'setConfigRegister requires 2 args'
    sys.exit(1)
  pp.pprint(client.setConfigRegister(eval(args[0]),eval(args[1]),))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
