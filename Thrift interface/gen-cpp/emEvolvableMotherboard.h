/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef emEvolvableMotherboard_H
#define emEvolvableMotherboard_H

#include <thrift/TDispatchProcessor.h>
#include "NascenseAPI_v01e_types.h"

namespace emInterfaces {

class emEvolvableMotherboardIf {
 public:
  virtual ~emEvolvableMotherboardIf() {}
  virtual int32_t ping() = 0;
  virtual void setLED(const int32_t index, const bool state) = 0;
  virtual void getMotherboardID(std::string& _return) = 0;
  virtual void getMotherboardState(std::string& _return) = 0;
  virtual void getLastError(std::string& _return) = 0;
  virtual bool reset() = 0;
  virtual bool reprogramme(const std::string& bin, const int32_t length) = 0;
  virtual void getDebugState(emDebugInfo& _return) = 0;
  virtual void clearSequences() = 0;
  virtual void runSequences() = 0;
  virtual void stopSequences() = 0;
  virtual void joinSequences() = 0;
  virtual void appendSequenceAction(const emSequenceItem& Item) = 0;
  virtual void getRecording(emWaveForm& _return, const int32_t srcPin) = 0;
  virtual void clearRecording(const int32_t srcPin) = 0;
  virtual int32_t getTemperature() = 0;
  virtual void setLogServer(const emLogServerSettings& logServer) = 0;
  virtual void setConfigRegister(const int32_t index, const int32_t value) = 0;
};

class emEvolvableMotherboardIfFactory {
 public:
  typedef emEvolvableMotherboardIf Handler;

  virtual ~emEvolvableMotherboardIfFactory() {}

  virtual emEvolvableMotherboardIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(emEvolvableMotherboardIf* /* handler */) = 0;
};

class emEvolvableMotherboardIfSingletonFactory : virtual public emEvolvableMotherboardIfFactory {
 public:
  emEvolvableMotherboardIfSingletonFactory(const boost::shared_ptr<emEvolvableMotherboardIf>& iface) : iface_(iface) {}
  virtual ~emEvolvableMotherboardIfSingletonFactory() {}

  virtual emEvolvableMotherboardIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(emEvolvableMotherboardIf* /* handler */) {}

 protected:
  boost::shared_ptr<emEvolvableMotherboardIf> iface_;
};

class emEvolvableMotherboardNull : virtual public emEvolvableMotherboardIf {
 public:
  virtual ~emEvolvableMotherboardNull() {}
  int32_t ping() {
    int32_t _return = 0;
    return _return;
  }
  void setLED(const int32_t /* index */, const bool /* state */) {
    return;
  }
  void getMotherboardID(std::string& /* _return */) {
    return;
  }
  void getMotherboardState(std::string& /* _return */) {
    return;
  }
  void getLastError(std::string& /* _return */) {
    return;
  }
  bool reset() {
    bool _return = false;
    return _return;
  }
  bool reprogramme(const std::string& /* bin */, const int32_t /* length */) {
    bool _return = false;
    return _return;
  }
  void getDebugState(emDebugInfo& /* _return */) {
    return;
  }
  void clearSequences() {
    return;
  }
  void runSequences() {
    return;
  }
  void stopSequences() {
    return;
  }
  void joinSequences() {
    return;
  }
  void appendSequenceAction(const emSequenceItem& /* Item */) {
    return;
  }
  void getRecording(emWaveForm& /* _return */, const int32_t /* srcPin */) {
    return;
  }
  void clearRecording(const int32_t /* srcPin */) {
    return;
  }
  int32_t getTemperature() {
    int32_t _return = 0;
    return _return;
  }
  void setLogServer(const emLogServerSettings& /* logServer */) {
    return;
  }
  void setConfigRegister(const int32_t /* index */, const int32_t /* value */) {
    return;
  }
};


class emEvolvableMotherboard_ping_args {
 public:

  emEvolvableMotherboard_ping_args() {
  }

  virtual ~emEvolvableMotherboard_ping_args() throw() {}


  bool operator == (const emEvolvableMotherboard_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const emEvolvableMotherboard_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emEvolvableMotherboard_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class emEvolvableMotherboard_ping_pargs {
 public:


  virtual ~emEvolvableMotherboard_ping_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emEvolvableMotherboard_ping_result__isset {
  _emEvolvableMotherboard_ping_result__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _emEvolvableMotherboard_ping_result__isset;

class emEvolvableMotherboard_ping_result {
 public:

  emEvolvableMotherboard_ping_result() : success(0) {
  }

  virtual ~emEvolvableMotherboard_ping_result() throw() {}

  int32_t success;
  emException err;

  _emEvolvableMotherboard_ping_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  void __set_err(const emException& val) {
    err = val;
  }

  bool operator == (const emEvolvableMotherboard_ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const emEvolvableMotherboard_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emEvolvableMotherboard_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emEvolvableMotherboard_ping_presult__isset {
  _emEvolvableMotherboard_ping_presult__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _emEvolvableMotherboard_ping_presult__isset;

class emEvolvableMotherboard_ping_presult {
 public:


  virtual ~emEvolvableMotherboard_ping_presult() throw() {}

  int32_t* success;
  emException err;

  _emEvolvableMotherboard_ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _emEvolvableMotherboard_setLED_args__isset {
  _emEvolvableMotherboard_setLED_args__isset() : index(false), state(false) {}
  bool index;
  bool state;
} _emEvolvableMotherboard_setLED_args__isset;

class emEvolvableMotherboard_setLED_args {
 public:

  emEvolvableMotherboard_setLED_args() : index(0), state(0) {
  }

  virtual ~emEvolvableMotherboard_setLED_args() throw() {}

  int32_t index;
  bool state;

  _emEvolvableMotherboard_setLED_args__isset __isset;

  void __set_index(const int32_t val) {
    index = val;
  }

  void __set_state(const bool val) {
    state = val;
  }

  bool operator == (const emEvolvableMotherboard_setLED_args & rhs) const
  {
    if (!(index == rhs.index))
      return false;
    if (!(state == rhs.state))
      return false;
    return true;
  }
  bool operator != (const emEvolvableMotherboard_setLED_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emEvolvableMotherboard_setLED_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class emEvolvableMotherboard_setLED_pargs {
 public:


  virtual ~emEvolvableMotherboard_setLED_pargs() throw() {}

  const int32_t* index;
  const bool* state;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emEvolvableMotherboard_setLED_result__isset {
  _emEvolvableMotherboard_setLED_result__isset() : err(false) {}
  bool err;
} _emEvolvableMotherboard_setLED_result__isset;

class emEvolvableMotherboard_setLED_result {
 public:

  emEvolvableMotherboard_setLED_result() {
  }

  virtual ~emEvolvableMotherboard_setLED_result() throw() {}

  emException err;

  _emEvolvableMotherboard_setLED_result__isset __isset;

  void __set_err(const emException& val) {
    err = val;
  }

  bool operator == (const emEvolvableMotherboard_setLED_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const emEvolvableMotherboard_setLED_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emEvolvableMotherboard_setLED_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emEvolvableMotherboard_setLED_presult__isset {
  _emEvolvableMotherboard_setLED_presult__isset() : err(false) {}
  bool err;
} _emEvolvableMotherboard_setLED_presult__isset;

class emEvolvableMotherboard_setLED_presult {
 public:


  virtual ~emEvolvableMotherboard_setLED_presult() throw() {}

  emException err;

  _emEvolvableMotherboard_setLED_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class emEvolvableMotherboard_getMotherboardID_args {
 public:

  emEvolvableMotherboard_getMotherboardID_args() {
  }

  virtual ~emEvolvableMotherboard_getMotherboardID_args() throw() {}


  bool operator == (const emEvolvableMotherboard_getMotherboardID_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const emEvolvableMotherboard_getMotherboardID_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emEvolvableMotherboard_getMotherboardID_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class emEvolvableMotherboard_getMotherboardID_pargs {
 public:


  virtual ~emEvolvableMotherboard_getMotherboardID_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emEvolvableMotherboard_getMotherboardID_result__isset {
  _emEvolvableMotherboard_getMotherboardID_result__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _emEvolvableMotherboard_getMotherboardID_result__isset;

class emEvolvableMotherboard_getMotherboardID_result {
 public:

  emEvolvableMotherboard_getMotherboardID_result() : success() {
  }

  virtual ~emEvolvableMotherboard_getMotherboardID_result() throw() {}

  std::string success;
  emException err;

  _emEvolvableMotherboard_getMotherboardID_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_err(const emException& val) {
    err = val;
  }

  bool operator == (const emEvolvableMotherboard_getMotherboardID_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const emEvolvableMotherboard_getMotherboardID_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emEvolvableMotherboard_getMotherboardID_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emEvolvableMotherboard_getMotherboardID_presult__isset {
  _emEvolvableMotherboard_getMotherboardID_presult__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _emEvolvableMotherboard_getMotherboardID_presult__isset;

class emEvolvableMotherboard_getMotherboardID_presult {
 public:


  virtual ~emEvolvableMotherboard_getMotherboardID_presult() throw() {}

  std::string* success;
  emException err;

  _emEvolvableMotherboard_getMotherboardID_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class emEvolvableMotherboard_getMotherboardState_args {
 public:

  emEvolvableMotherboard_getMotherboardState_args() {
  }

  virtual ~emEvolvableMotherboard_getMotherboardState_args() throw() {}


  bool operator == (const emEvolvableMotherboard_getMotherboardState_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const emEvolvableMotherboard_getMotherboardState_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emEvolvableMotherboard_getMotherboardState_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class emEvolvableMotherboard_getMotherboardState_pargs {
 public:


  virtual ~emEvolvableMotherboard_getMotherboardState_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emEvolvableMotherboard_getMotherboardState_result__isset {
  _emEvolvableMotherboard_getMotherboardState_result__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _emEvolvableMotherboard_getMotherboardState_result__isset;

class emEvolvableMotherboard_getMotherboardState_result {
 public:

  emEvolvableMotherboard_getMotherboardState_result() : success() {
  }

  virtual ~emEvolvableMotherboard_getMotherboardState_result() throw() {}

  std::string success;
  emException err;

  _emEvolvableMotherboard_getMotherboardState_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_err(const emException& val) {
    err = val;
  }

  bool operator == (const emEvolvableMotherboard_getMotherboardState_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const emEvolvableMotherboard_getMotherboardState_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emEvolvableMotherboard_getMotherboardState_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emEvolvableMotherboard_getMotherboardState_presult__isset {
  _emEvolvableMotherboard_getMotherboardState_presult__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _emEvolvableMotherboard_getMotherboardState_presult__isset;

class emEvolvableMotherboard_getMotherboardState_presult {
 public:


  virtual ~emEvolvableMotherboard_getMotherboardState_presult() throw() {}

  std::string* success;
  emException err;

  _emEvolvableMotherboard_getMotherboardState_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class emEvolvableMotherboard_getLastError_args {
 public:

  emEvolvableMotherboard_getLastError_args() {
  }

  virtual ~emEvolvableMotherboard_getLastError_args() throw() {}


  bool operator == (const emEvolvableMotherboard_getLastError_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const emEvolvableMotherboard_getLastError_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emEvolvableMotherboard_getLastError_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class emEvolvableMotherboard_getLastError_pargs {
 public:


  virtual ~emEvolvableMotherboard_getLastError_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emEvolvableMotherboard_getLastError_result__isset {
  _emEvolvableMotherboard_getLastError_result__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _emEvolvableMotherboard_getLastError_result__isset;

class emEvolvableMotherboard_getLastError_result {
 public:

  emEvolvableMotherboard_getLastError_result() : success() {
  }

  virtual ~emEvolvableMotherboard_getLastError_result() throw() {}

  std::string success;
  emException err;

  _emEvolvableMotherboard_getLastError_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_err(const emException& val) {
    err = val;
  }

  bool operator == (const emEvolvableMotherboard_getLastError_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const emEvolvableMotherboard_getLastError_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emEvolvableMotherboard_getLastError_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emEvolvableMotherboard_getLastError_presult__isset {
  _emEvolvableMotherboard_getLastError_presult__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _emEvolvableMotherboard_getLastError_presult__isset;

class emEvolvableMotherboard_getLastError_presult {
 public:


  virtual ~emEvolvableMotherboard_getLastError_presult() throw() {}

  std::string* success;
  emException err;

  _emEvolvableMotherboard_getLastError_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class emEvolvableMotherboard_reset_args {
 public:

  emEvolvableMotherboard_reset_args() {
  }

  virtual ~emEvolvableMotherboard_reset_args() throw() {}


  bool operator == (const emEvolvableMotherboard_reset_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const emEvolvableMotherboard_reset_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emEvolvableMotherboard_reset_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class emEvolvableMotherboard_reset_pargs {
 public:


  virtual ~emEvolvableMotherboard_reset_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emEvolvableMotherboard_reset_result__isset {
  _emEvolvableMotherboard_reset_result__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _emEvolvableMotherboard_reset_result__isset;

class emEvolvableMotherboard_reset_result {
 public:

  emEvolvableMotherboard_reset_result() : success(0) {
  }

  virtual ~emEvolvableMotherboard_reset_result() throw() {}

  bool success;
  emException err;

  _emEvolvableMotherboard_reset_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_err(const emException& val) {
    err = val;
  }

  bool operator == (const emEvolvableMotherboard_reset_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const emEvolvableMotherboard_reset_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emEvolvableMotherboard_reset_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emEvolvableMotherboard_reset_presult__isset {
  _emEvolvableMotherboard_reset_presult__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _emEvolvableMotherboard_reset_presult__isset;

class emEvolvableMotherboard_reset_presult {
 public:


  virtual ~emEvolvableMotherboard_reset_presult() throw() {}

  bool* success;
  emException err;

  _emEvolvableMotherboard_reset_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _emEvolvableMotherboard_reprogramme_args__isset {
  _emEvolvableMotherboard_reprogramme_args__isset() : bin(false), length(false) {}
  bool bin;
  bool length;
} _emEvolvableMotherboard_reprogramme_args__isset;

class emEvolvableMotherboard_reprogramme_args {
 public:

  emEvolvableMotherboard_reprogramme_args() : bin(), length(0) {
  }

  virtual ~emEvolvableMotherboard_reprogramme_args() throw() {}

  std::string bin;
  int32_t length;

  _emEvolvableMotherboard_reprogramme_args__isset __isset;

  void __set_bin(const std::string& val) {
    bin = val;
  }

  void __set_length(const int32_t val) {
    length = val;
  }

  bool operator == (const emEvolvableMotherboard_reprogramme_args & rhs) const
  {
    if (!(bin == rhs.bin))
      return false;
    if (!(length == rhs.length))
      return false;
    return true;
  }
  bool operator != (const emEvolvableMotherboard_reprogramme_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emEvolvableMotherboard_reprogramme_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class emEvolvableMotherboard_reprogramme_pargs {
 public:


  virtual ~emEvolvableMotherboard_reprogramme_pargs() throw() {}

  const std::string* bin;
  const int32_t* length;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emEvolvableMotherboard_reprogramme_result__isset {
  _emEvolvableMotherboard_reprogramme_result__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _emEvolvableMotherboard_reprogramme_result__isset;

class emEvolvableMotherboard_reprogramme_result {
 public:

  emEvolvableMotherboard_reprogramme_result() : success(0) {
  }

  virtual ~emEvolvableMotherboard_reprogramme_result() throw() {}

  bool success;
  emException err;

  _emEvolvableMotherboard_reprogramme_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_err(const emException& val) {
    err = val;
  }

  bool operator == (const emEvolvableMotherboard_reprogramme_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const emEvolvableMotherboard_reprogramme_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emEvolvableMotherboard_reprogramme_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emEvolvableMotherboard_reprogramme_presult__isset {
  _emEvolvableMotherboard_reprogramme_presult__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _emEvolvableMotherboard_reprogramme_presult__isset;

class emEvolvableMotherboard_reprogramme_presult {
 public:


  virtual ~emEvolvableMotherboard_reprogramme_presult() throw() {}

  bool* success;
  emException err;

  _emEvolvableMotherboard_reprogramme_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class emEvolvableMotherboard_getDebugState_args {
 public:

  emEvolvableMotherboard_getDebugState_args() {
  }

  virtual ~emEvolvableMotherboard_getDebugState_args() throw() {}


  bool operator == (const emEvolvableMotherboard_getDebugState_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const emEvolvableMotherboard_getDebugState_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emEvolvableMotherboard_getDebugState_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class emEvolvableMotherboard_getDebugState_pargs {
 public:


  virtual ~emEvolvableMotherboard_getDebugState_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emEvolvableMotherboard_getDebugState_result__isset {
  _emEvolvableMotherboard_getDebugState_result__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _emEvolvableMotherboard_getDebugState_result__isset;

class emEvolvableMotherboard_getDebugState_result {
 public:

  emEvolvableMotherboard_getDebugState_result() {
  }

  virtual ~emEvolvableMotherboard_getDebugState_result() throw() {}

  emDebugInfo success;
  emException err;

  _emEvolvableMotherboard_getDebugState_result__isset __isset;

  void __set_success(const emDebugInfo& val) {
    success = val;
  }

  void __set_err(const emException& val) {
    err = val;
  }

  bool operator == (const emEvolvableMotherboard_getDebugState_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const emEvolvableMotherboard_getDebugState_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emEvolvableMotherboard_getDebugState_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emEvolvableMotherboard_getDebugState_presult__isset {
  _emEvolvableMotherboard_getDebugState_presult__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _emEvolvableMotherboard_getDebugState_presult__isset;

class emEvolvableMotherboard_getDebugState_presult {
 public:


  virtual ~emEvolvableMotherboard_getDebugState_presult() throw() {}

  emDebugInfo* success;
  emException err;

  _emEvolvableMotherboard_getDebugState_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class emEvolvableMotherboard_clearSequences_args {
 public:

  emEvolvableMotherboard_clearSequences_args() {
  }

  virtual ~emEvolvableMotherboard_clearSequences_args() throw() {}


  bool operator == (const emEvolvableMotherboard_clearSequences_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const emEvolvableMotherboard_clearSequences_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emEvolvableMotherboard_clearSequences_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class emEvolvableMotherboard_clearSequences_pargs {
 public:


  virtual ~emEvolvableMotherboard_clearSequences_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emEvolvableMotherboard_clearSequences_result__isset {
  _emEvolvableMotherboard_clearSequences_result__isset() : err(false) {}
  bool err;
} _emEvolvableMotherboard_clearSequences_result__isset;

class emEvolvableMotherboard_clearSequences_result {
 public:

  emEvolvableMotherboard_clearSequences_result() {
  }

  virtual ~emEvolvableMotherboard_clearSequences_result() throw() {}

  emException err;

  _emEvolvableMotherboard_clearSequences_result__isset __isset;

  void __set_err(const emException& val) {
    err = val;
  }

  bool operator == (const emEvolvableMotherboard_clearSequences_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const emEvolvableMotherboard_clearSequences_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emEvolvableMotherboard_clearSequences_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emEvolvableMotherboard_clearSequences_presult__isset {
  _emEvolvableMotherboard_clearSequences_presult__isset() : err(false) {}
  bool err;
} _emEvolvableMotherboard_clearSequences_presult__isset;

class emEvolvableMotherboard_clearSequences_presult {
 public:


  virtual ~emEvolvableMotherboard_clearSequences_presult() throw() {}

  emException err;

  _emEvolvableMotherboard_clearSequences_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class emEvolvableMotherboard_runSequences_args {
 public:

  emEvolvableMotherboard_runSequences_args() {
  }

  virtual ~emEvolvableMotherboard_runSequences_args() throw() {}


  bool operator == (const emEvolvableMotherboard_runSequences_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const emEvolvableMotherboard_runSequences_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emEvolvableMotherboard_runSequences_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class emEvolvableMotherboard_runSequences_pargs {
 public:


  virtual ~emEvolvableMotherboard_runSequences_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emEvolvableMotherboard_runSequences_result__isset {
  _emEvolvableMotherboard_runSequences_result__isset() : err(false) {}
  bool err;
} _emEvolvableMotherboard_runSequences_result__isset;

class emEvolvableMotherboard_runSequences_result {
 public:

  emEvolvableMotherboard_runSequences_result() {
  }

  virtual ~emEvolvableMotherboard_runSequences_result() throw() {}

  emException err;

  _emEvolvableMotherboard_runSequences_result__isset __isset;

  void __set_err(const emException& val) {
    err = val;
  }

  bool operator == (const emEvolvableMotherboard_runSequences_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const emEvolvableMotherboard_runSequences_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emEvolvableMotherboard_runSequences_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emEvolvableMotherboard_runSequences_presult__isset {
  _emEvolvableMotherboard_runSequences_presult__isset() : err(false) {}
  bool err;
} _emEvolvableMotherboard_runSequences_presult__isset;

class emEvolvableMotherboard_runSequences_presult {
 public:


  virtual ~emEvolvableMotherboard_runSequences_presult() throw() {}

  emException err;

  _emEvolvableMotherboard_runSequences_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class emEvolvableMotherboard_stopSequences_args {
 public:

  emEvolvableMotherboard_stopSequences_args() {
  }

  virtual ~emEvolvableMotherboard_stopSequences_args() throw() {}


  bool operator == (const emEvolvableMotherboard_stopSequences_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const emEvolvableMotherboard_stopSequences_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emEvolvableMotherboard_stopSequences_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class emEvolvableMotherboard_stopSequences_pargs {
 public:


  virtual ~emEvolvableMotherboard_stopSequences_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emEvolvableMotherboard_stopSequences_result__isset {
  _emEvolvableMotherboard_stopSequences_result__isset() : err(false) {}
  bool err;
} _emEvolvableMotherboard_stopSequences_result__isset;

class emEvolvableMotherboard_stopSequences_result {
 public:

  emEvolvableMotherboard_stopSequences_result() {
  }

  virtual ~emEvolvableMotherboard_stopSequences_result() throw() {}

  emException err;

  _emEvolvableMotherboard_stopSequences_result__isset __isset;

  void __set_err(const emException& val) {
    err = val;
  }

  bool operator == (const emEvolvableMotherboard_stopSequences_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const emEvolvableMotherboard_stopSequences_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emEvolvableMotherboard_stopSequences_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emEvolvableMotherboard_stopSequences_presult__isset {
  _emEvolvableMotherboard_stopSequences_presult__isset() : err(false) {}
  bool err;
} _emEvolvableMotherboard_stopSequences_presult__isset;

class emEvolvableMotherboard_stopSequences_presult {
 public:


  virtual ~emEvolvableMotherboard_stopSequences_presult() throw() {}

  emException err;

  _emEvolvableMotherboard_stopSequences_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class emEvolvableMotherboard_joinSequences_args {
 public:

  emEvolvableMotherboard_joinSequences_args() {
  }

  virtual ~emEvolvableMotherboard_joinSequences_args() throw() {}


  bool operator == (const emEvolvableMotherboard_joinSequences_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const emEvolvableMotherboard_joinSequences_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emEvolvableMotherboard_joinSequences_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class emEvolvableMotherboard_joinSequences_pargs {
 public:


  virtual ~emEvolvableMotherboard_joinSequences_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emEvolvableMotherboard_joinSequences_result__isset {
  _emEvolvableMotherboard_joinSequences_result__isset() : err(false) {}
  bool err;
} _emEvolvableMotherboard_joinSequences_result__isset;

class emEvolvableMotherboard_joinSequences_result {
 public:

  emEvolvableMotherboard_joinSequences_result() {
  }

  virtual ~emEvolvableMotherboard_joinSequences_result() throw() {}

  emException err;

  _emEvolvableMotherboard_joinSequences_result__isset __isset;

  void __set_err(const emException& val) {
    err = val;
  }

  bool operator == (const emEvolvableMotherboard_joinSequences_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const emEvolvableMotherboard_joinSequences_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emEvolvableMotherboard_joinSequences_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emEvolvableMotherboard_joinSequences_presult__isset {
  _emEvolvableMotherboard_joinSequences_presult__isset() : err(false) {}
  bool err;
} _emEvolvableMotherboard_joinSequences_presult__isset;

class emEvolvableMotherboard_joinSequences_presult {
 public:


  virtual ~emEvolvableMotherboard_joinSequences_presult() throw() {}

  emException err;

  _emEvolvableMotherboard_joinSequences_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _emEvolvableMotherboard_appendSequenceAction_args__isset {
  _emEvolvableMotherboard_appendSequenceAction_args__isset() : Item(false) {}
  bool Item;
} _emEvolvableMotherboard_appendSequenceAction_args__isset;

class emEvolvableMotherboard_appendSequenceAction_args {
 public:

  emEvolvableMotherboard_appendSequenceAction_args() {
  }

  virtual ~emEvolvableMotherboard_appendSequenceAction_args() throw() {}

  emSequenceItem Item;

  _emEvolvableMotherboard_appendSequenceAction_args__isset __isset;

  void __set_Item(const emSequenceItem& val) {
    Item = val;
  }

  bool operator == (const emEvolvableMotherboard_appendSequenceAction_args & rhs) const
  {
    if (!(Item == rhs.Item))
      return false;
    return true;
  }
  bool operator != (const emEvolvableMotherboard_appendSequenceAction_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emEvolvableMotherboard_appendSequenceAction_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class emEvolvableMotherboard_appendSequenceAction_pargs {
 public:


  virtual ~emEvolvableMotherboard_appendSequenceAction_pargs() throw() {}

  const emSequenceItem* Item;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emEvolvableMotherboard_appendSequenceAction_result__isset {
  _emEvolvableMotherboard_appendSequenceAction_result__isset() : err(false) {}
  bool err;
} _emEvolvableMotherboard_appendSequenceAction_result__isset;

class emEvolvableMotherboard_appendSequenceAction_result {
 public:

  emEvolvableMotherboard_appendSequenceAction_result() {
  }

  virtual ~emEvolvableMotherboard_appendSequenceAction_result() throw() {}

  emException err;

  _emEvolvableMotherboard_appendSequenceAction_result__isset __isset;

  void __set_err(const emException& val) {
    err = val;
  }

  bool operator == (const emEvolvableMotherboard_appendSequenceAction_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const emEvolvableMotherboard_appendSequenceAction_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emEvolvableMotherboard_appendSequenceAction_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emEvolvableMotherboard_appendSequenceAction_presult__isset {
  _emEvolvableMotherboard_appendSequenceAction_presult__isset() : err(false) {}
  bool err;
} _emEvolvableMotherboard_appendSequenceAction_presult__isset;

class emEvolvableMotherboard_appendSequenceAction_presult {
 public:


  virtual ~emEvolvableMotherboard_appendSequenceAction_presult() throw() {}

  emException err;

  _emEvolvableMotherboard_appendSequenceAction_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _emEvolvableMotherboard_getRecording_args__isset {
  _emEvolvableMotherboard_getRecording_args__isset() : srcPin(false) {}
  bool srcPin;
} _emEvolvableMotherboard_getRecording_args__isset;

class emEvolvableMotherboard_getRecording_args {
 public:

  emEvolvableMotherboard_getRecording_args() : srcPin(0) {
  }

  virtual ~emEvolvableMotherboard_getRecording_args() throw() {}

  int32_t srcPin;

  _emEvolvableMotherboard_getRecording_args__isset __isset;

  void __set_srcPin(const int32_t val) {
    srcPin = val;
  }

  bool operator == (const emEvolvableMotherboard_getRecording_args & rhs) const
  {
    if (!(srcPin == rhs.srcPin))
      return false;
    return true;
  }
  bool operator != (const emEvolvableMotherboard_getRecording_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emEvolvableMotherboard_getRecording_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class emEvolvableMotherboard_getRecording_pargs {
 public:


  virtual ~emEvolvableMotherboard_getRecording_pargs() throw() {}

  const int32_t* srcPin;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emEvolvableMotherboard_getRecording_result__isset {
  _emEvolvableMotherboard_getRecording_result__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _emEvolvableMotherboard_getRecording_result__isset;

class emEvolvableMotherboard_getRecording_result {
 public:

  emEvolvableMotherboard_getRecording_result() {
  }

  virtual ~emEvolvableMotherboard_getRecording_result() throw() {}

  emWaveForm success;
  emException err;

  _emEvolvableMotherboard_getRecording_result__isset __isset;

  void __set_success(const emWaveForm& val) {
    success = val;
  }

  void __set_err(const emException& val) {
    err = val;
  }

  bool operator == (const emEvolvableMotherboard_getRecording_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const emEvolvableMotherboard_getRecording_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emEvolvableMotherboard_getRecording_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emEvolvableMotherboard_getRecording_presult__isset {
  _emEvolvableMotherboard_getRecording_presult__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _emEvolvableMotherboard_getRecording_presult__isset;

class emEvolvableMotherboard_getRecording_presult {
 public:


  virtual ~emEvolvableMotherboard_getRecording_presult() throw() {}

  emWaveForm* success;
  emException err;

  _emEvolvableMotherboard_getRecording_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _emEvolvableMotherboard_clearRecording_args__isset {
  _emEvolvableMotherboard_clearRecording_args__isset() : srcPin(false) {}
  bool srcPin;
} _emEvolvableMotherboard_clearRecording_args__isset;

class emEvolvableMotherboard_clearRecording_args {
 public:

  emEvolvableMotherboard_clearRecording_args() : srcPin(0) {
  }

  virtual ~emEvolvableMotherboard_clearRecording_args() throw() {}

  int32_t srcPin;

  _emEvolvableMotherboard_clearRecording_args__isset __isset;

  void __set_srcPin(const int32_t val) {
    srcPin = val;
  }

  bool operator == (const emEvolvableMotherboard_clearRecording_args & rhs) const
  {
    if (!(srcPin == rhs.srcPin))
      return false;
    return true;
  }
  bool operator != (const emEvolvableMotherboard_clearRecording_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emEvolvableMotherboard_clearRecording_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class emEvolvableMotherboard_clearRecording_pargs {
 public:


  virtual ~emEvolvableMotherboard_clearRecording_pargs() throw() {}

  const int32_t* srcPin;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emEvolvableMotherboard_clearRecording_result__isset {
  _emEvolvableMotherboard_clearRecording_result__isset() : err(false) {}
  bool err;
} _emEvolvableMotherboard_clearRecording_result__isset;

class emEvolvableMotherboard_clearRecording_result {
 public:

  emEvolvableMotherboard_clearRecording_result() {
  }

  virtual ~emEvolvableMotherboard_clearRecording_result() throw() {}

  emException err;

  _emEvolvableMotherboard_clearRecording_result__isset __isset;

  void __set_err(const emException& val) {
    err = val;
  }

  bool operator == (const emEvolvableMotherboard_clearRecording_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const emEvolvableMotherboard_clearRecording_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emEvolvableMotherboard_clearRecording_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emEvolvableMotherboard_clearRecording_presult__isset {
  _emEvolvableMotherboard_clearRecording_presult__isset() : err(false) {}
  bool err;
} _emEvolvableMotherboard_clearRecording_presult__isset;

class emEvolvableMotherboard_clearRecording_presult {
 public:


  virtual ~emEvolvableMotherboard_clearRecording_presult() throw() {}

  emException err;

  _emEvolvableMotherboard_clearRecording_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class emEvolvableMotherboard_getTemperature_args {
 public:

  emEvolvableMotherboard_getTemperature_args() {
  }

  virtual ~emEvolvableMotherboard_getTemperature_args() throw() {}


  bool operator == (const emEvolvableMotherboard_getTemperature_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const emEvolvableMotherboard_getTemperature_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emEvolvableMotherboard_getTemperature_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class emEvolvableMotherboard_getTemperature_pargs {
 public:


  virtual ~emEvolvableMotherboard_getTemperature_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emEvolvableMotherboard_getTemperature_result__isset {
  _emEvolvableMotherboard_getTemperature_result__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _emEvolvableMotherboard_getTemperature_result__isset;

class emEvolvableMotherboard_getTemperature_result {
 public:

  emEvolvableMotherboard_getTemperature_result() : success(0) {
  }

  virtual ~emEvolvableMotherboard_getTemperature_result() throw() {}

  int32_t success;
  emException err;

  _emEvolvableMotherboard_getTemperature_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  void __set_err(const emException& val) {
    err = val;
  }

  bool operator == (const emEvolvableMotherboard_getTemperature_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const emEvolvableMotherboard_getTemperature_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emEvolvableMotherboard_getTemperature_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emEvolvableMotherboard_getTemperature_presult__isset {
  _emEvolvableMotherboard_getTemperature_presult__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _emEvolvableMotherboard_getTemperature_presult__isset;

class emEvolvableMotherboard_getTemperature_presult {
 public:


  virtual ~emEvolvableMotherboard_getTemperature_presult() throw() {}

  int32_t* success;
  emException err;

  _emEvolvableMotherboard_getTemperature_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _emEvolvableMotherboard_setLogServer_args__isset {
  _emEvolvableMotherboard_setLogServer_args__isset() : logServer(false) {}
  bool logServer;
} _emEvolvableMotherboard_setLogServer_args__isset;

class emEvolvableMotherboard_setLogServer_args {
 public:

  emEvolvableMotherboard_setLogServer_args() {
  }

  virtual ~emEvolvableMotherboard_setLogServer_args() throw() {}

  emLogServerSettings logServer;

  _emEvolvableMotherboard_setLogServer_args__isset __isset;

  void __set_logServer(const emLogServerSettings& val) {
    logServer = val;
  }

  bool operator == (const emEvolvableMotherboard_setLogServer_args & rhs) const
  {
    if (!(logServer == rhs.logServer))
      return false;
    return true;
  }
  bool operator != (const emEvolvableMotherboard_setLogServer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emEvolvableMotherboard_setLogServer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class emEvolvableMotherboard_setLogServer_pargs {
 public:


  virtual ~emEvolvableMotherboard_setLogServer_pargs() throw() {}

  const emLogServerSettings* logServer;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emEvolvableMotherboard_setLogServer_result__isset {
  _emEvolvableMotherboard_setLogServer_result__isset() : err(false) {}
  bool err;
} _emEvolvableMotherboard_setLogServer_result__isset;

class emEvolvableMotherboard_setLogServer_result {
 public:

  emEvolvableMotherboard_setLogServer_result() {
  }

  virtual ~emEvolvableMotherboard_setLogServer_result() throw() {}

  emException err;

  _emEvolvableMotherboard_setLogServer_result__isset __isset;

  void __set_err(const emException& val) {
    err = val;
  }

  bool operator == (const emEvolvableMotherboard_setLogServer_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const emEvolvableMotherboard_setLogServer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emEvolvableMotherboard_setLogServer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emEvolvableMotherboard_setLogServer_presult__isset {
  _emEvolvableMotherboard_setLogServer_presult__isset() : err(false) {}
  bool err;
} _emEvolvableMotherboard_setLogServer_presult__isset;

class emEvolvableMotherboard_setLogServer_presult {
 public:


  virtual ~emEvolvableMotherboard_setLogServer_presult() throw() {}

  emException err;

  _emEvolvableMotherboard_setLogServer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _emEvolvableMotherboard_setConfigRegister_args__isset {
  _emEvolvableMotherboard_setConfigRegister_args__isset() : index(false), value(false) {}
  bool index;
  bool value;
} _emEvolvableMotherboard_setConfigRegister_args__isset;

class emEvolvableMotherboard_setConfigRegister_args {
 public:

  emEvolvableMotherboard_setConfigRegister_args() : index(0), value(0) {
  }

  virtual ~emEvolvableMotherboard_setConfigRegister_args() throw() {}

  int32_t index;
  int32_t value;

  _emEvolvableMotherboard_setConfigRegister_args__isset __isset;

  void __set_index(const int32_t val) {
    index = val;
  }

  void __set_value(const int32_t val) {
    value = val;
  }

  bool operator == (const emEvolvableMotherboard_setConfigRegister_args & rhs) const
  {
    if (!(index == rhs.index))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const emEvolvableMotherboard_setConfigRegister_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emEvolvableMotherboard_setConfigRegister_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class emEvolvableMotherboard_setConfigRegister_pargs {
 public:


  virtual ~emEvolvableMotherboard_setConfigRegister_pargs() throw() {}

  const int32_t* index;
  const int32_t* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emEvolvableMotherboard_setConfigRegister_result__isset {
  _emEvolvableMotherboard_setConfigRegister_result__isset() : err(false) {}
  bool err;
} _emEvolvableMotherboard_setConfigRegister_result__isset;

class emEvolvableMotherboard_setConfigRegister_result {
 public:

  emEvolvableMotherboard_setConfigRegister_result() {
  }

  virtual ~emEvolvableMotherboard_setConfigRegister_result() throw() {}

  emException err;

  _emEvolvableMotherboard_setConfigRegister_result__isset __isset;

  void __set_err(const emException& val) {
    err = val;
  }

  bool operator == (const emEvolvableMotherboard_setConfigRegister_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const emEvolvableMotherboard_setConfigRegister_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const emEvolvableMotherboard_setConfigRegister_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _emEvolvableMotherboard_setConfigRegister_presult__isset {
  _emEvolvableMotherboard_setConfigRegister_presult__isset() : err(false) {}
  bool err;
} _emEvolvableMotherboard_setConfigRegister_presult__isset;

class emEvolvableMotherboard_setConfigRegister_presult {
 public:


  virtual ~emEvolvableMotherboard_setConfigRegister_presult() throw() {}

  emException err;

  _emEvolvableMotherboard_setConfigRegister_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class emEvolvableMotherboardClient : virtual public emEvolvableMotherboardIf {
 public:
  emEvolvableMotherboardClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  emEvolvableMotherboardClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t ping();
  void send_ping();
  int32_t recv_ping();
  void setLED(const int32_t index, const bool state);
  void send_setLED(const int32_t index, const bool state);
  void recv_setLED();
  void getMotherboardID(std::string& _return);
  void send_getMotherboardID();
  void recv_getMotherboardID(std::string& _return);
  void getMotherboardState(std::string& _return);
  void send_getMotherboardState();
  void recv_getMotherboardState(std::string& _return);
  void getLastError(std::string& _return);
  void send_getLastError();
  void recv_getLastError(std::string& _return);
  bool reset();
  void send_reset();
  bool recv_reset();
  bool reprogramme(const std::string& bin, const int32_t length);
  void send_reprogramme(const std::string& bin, const int32_t length);
  bool recv_reprogramme();
  void getDebugState(emDebugInfo& _return);
  void send_getDebugState();
  void recv_getDebugState(emDebugInfo& _return);
  void clearSequences();
  void send_clearSequences();
  void recv_clearSequences();
  void runSequences();
  void send_runSequences();
  void recv_runSequences();
  void stopSequences();
  void send_stopSequences();
  void recv_stopSequences();
  void joinSequences();
  void send_joinSequences();
  void recv_joinSequences();
  void appendSequenceAction(const emSequenceItem& Item);
  void send_appendSequenceAction(const emSequenceItem& Item);
  void recv_appendSequenceAction();
  void getRecording(emWaveForm& _return, const int32_t srcPin);
  void send_getRecording(const int32_t srcPin);
  void recv_getRecording(emWaveForm& _return);
  void clearRecording(const int32_t srcPin);
  void send_clearRecording(const int32_t srcPin);
  void recv_clearRecording();
  int32_t getTemperature();
  void send_getTemperature();
  int32_t recv_getTemperature();
  void setLogServer(const emLogServerSettings& logServer);
  void send_setLogServer(const emLogServerSettings& logServer);
  void recv_setLogServer();
  void setConfigRegister(const int32_t index, const int32_t value);
  void send_setConfigRegister(const int32_t index, const int32_t value);
  void recv_setConfigRegister();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class emEvolvableMotherboardProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<emEvolvableMotherboardIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (emEvolvableMotherboardProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setLED(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getMotherboardID(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getMotherboardState(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getLastError(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_reset(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_reprogramme(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getDebugState(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clearSequences(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_runSequences(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_stopSequences(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_joinSequences(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_appendSequenceAction(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getRecording(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clearRecording(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getTemperature(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setLogServer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setConfigRegister(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  emEvolvableMotherboardProcessor(boost::shared_ptr<emEvolvableMotherboardIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &emEvolvableMotherboardProcessor::process_ping;
    processMap_["setLED"] = &emEvolvableMotherboardProcessor::process_setLED;
    processMap_["getMotherboardID"] = &emEvolvableMotherboardProcessor::process_getMotherboardID;
    processMap_["getMotherboardState"] = &emEvolvableMotherboardProcessor::process_getMotherboardState;
    processMap_["getLastError"] = &emEvolvableMotherboardProcessor::process_getLastError;
    processMap_["reset"] = &emEvolvableMotherboardProcessor::process_reset;
    processMap_["reprogramme"] = &emEvolvableMotherboardProcessor::process_reprogramme;
    processMap_["getDebugState"] = &emEvolvableMotherboardProcessor::process_getDebugState;
    processMap_["clearSequences"] = &emEvolvableMotherboardProcessor::process_clearSequences;
    processMap_["runSequences"] = &emEvolvableMotherboardProcessor::process_runSequences;
    processMap_["stopSequences"] = &emEvolvableMotherboardProcessor::process_stopSequences;
    processMap_["joinSequences"] = &emEvolvableMotherboardProcessor::process_joinSequences;
    processMap_["appendSequenceAction"] = &emEvolvableMotherboardProcessor::process_appendSequenceAction;
    processMap_["getRecording"] = &emEvolvableMotherboardProcessor::process_getRecording;
    processMap_["clearRecording"] = &emEvolvableMotherboardProcessor::process_clearRecording;
    processMap_["getTemperature"] = &emEvolvableMotherboardProcessor::process_getTemperature;
    processMap_["setLogServer"] = &emEvolvableMotherboardProcessor::process_setLogServer;
    processMap_["setConfigRegister"] = &emEvolvableMotherboardProcessor::process_setConfigRegister;
  }

  virtual ~emEvolvableMotherboardProcessor() {}
};

class emEvolvableMotherboardProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  emEvolvableMotherboardProcessorFactory(const ::boost::shared_ptr< emEvolvableMotherboardIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< emEvolvableMotherboardIfFactory > handlerFactory_;
};

class emEvolvableMotherboardMultiface : virtual public emEvolvableMotherboardIf {
 public:
  emEvolvableMotherboardMultiface(std::vector<boost::shared_ptr<emEvolvableMotherboardIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~emEvolvableMotherboardMultiface() {}
 protected:
  std::vector<boost::shared_ptr<emEvolvableMotherboardIf> > ifaces_;
  emEvolvableMotherboardMultiface() {}
  void add(boost::shared_ptr<emEvolvableMotherboardIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    return ifaces_[i]->ping();
  }

  void setLED(const int32_t index, const bool state) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setLED(index, state);
    }
    ifaces_[i]->setLED(index, state);
  }

  void getMotherboardID(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getMotherboardID(_return);
    }
    ifaces_[i]->getMotherboardID(_return);
    return;
  }

  void getMotherboardState(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getMotherboardState(_return);
    }
    ifaces_[i]->getMotherboardState(_return);
    return;
  }

  void getLastError(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getLastError(_return);
    }
    ifaces_[i]->getLastError(_return);
    return;
  }

  bool reset() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->reset();
    }
    return ifaces_[i]->reset();
  }

  bool reprogramme(const std::string& bin, const int32_t length) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->reprogramme(bin, length);
    }
    return ifaces_[i]->reprogramme(bin, length);
  }

  void getDebugState(emDebugInfo& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getDebugState(_return);
    }
    ifaces_[i]->getDebugState(_return);
    return;
  }

  void clearSequences() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clearSequences();
    }
    ifaces_[i]->clearSequences();
  }

  void runSequences() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->runSequences();
    }
    ifaces_[i]->runSequences();
  }

  void stopSequences() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->stopSequences();
    }
    ifaces_[i]->stopSequences();
  }

  void joinSequences() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->joinSequences();
    }
    ifaces_[i]->joinSequences();
  }

  void appendSequenceAction(const emSequenceItem& Item) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->appendSequenceAction(Item);
    }
    ifaces_[i]->appendSequenceAction(Item);
  }

  void getRecording(emWaveForm& _return, const int32_t srcPin) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getRecording(_return, srcPin);
    }
    ifaces_[i]->getRecording(_return, srcPin);
    return;
  }

  void clearRecording(const int32_t srcPin) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clearRecording(srcPin);
    }
    ifaces_[i]->clearRecording(srcPin);
  }

  int32_t getTemperature() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getTemperature();
    }
    return ifaces_[i]->getTemperature();
  }

  void setLogServer(const emLogServerSettings& logServer) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setLogServer(logServer);
    }
    ifaces_[i]->setLogServer(logServer);
  }

  void setConfigRegister(const int32_t index, const int32_t value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setConfigRegister(index, value);
    }
    ifaces_[i]->setConfigRegister(index, value);
  }

};

} // namespace

#endif
