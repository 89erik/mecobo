/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace emInterfaces
{
  public partial class emEvolvableMotherboard {
    /// <summary>
    /// This is the definition of the API. These methods are what external programs will see when they connect.
    /// 
    /// All operations# return error info by throwing exceptions. Exceptions therefore should be processed, and not ignored.
    /// </summary>
    public interface Iface {
      /// <summary>
      /// Test for the existence of the service
      /// </summary>
      int ping();
      #if SILVERLIGHT
      IAsyncResult Begin_ping(AsyncCallback callback, object state, );
      int End_ping(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Set LED status
      /// </summary>
      /// <param name="index"></param>
      /// <param name="state"></param>
      void setLED(int index, bool state);
      #if SILVERLIGHT
      IAsyncResult Begin_setLED(AsyncCallback callback, object state, int index, bool state);
      void End_setLED(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Each motherboard should have an ID for logging, versioning etc
      /// </summary>
      string getMotherboardID();
      #if SILVERLIGHT
      IAsyncResult Begin_getMotherboardID(AsyncCallback callback, object state, );
      string End_getMotherboardID(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Description of what the EM is currently doing
      /// </summary>
      string getMotherboardState();
      #if SILVERLIGHT
      IAsyncResult Begin_getMotherboardState(AsyncCallback callback, object state, );
      string End_getMotherboardState(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// See if there is any error message
      /// </summary>
      string getLastError();
      #if SILVERLIGHT
      IAsyncResult Begin_getLastError(AsyncCallback callback, object state, );
      string End_getLastError(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Resets the motherboard to initial, default config. Returns true if OK
      /// </summary>
      bool reset();
      #if SILVERLIGHT
      IAsyncResult Begin_reset(AsyncCallback callback, object state, );
      bool End_reset(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Reprogramme the FPGA
      /// </summary>
      /// <param name="bin"></param>
      /// <param name="length"></param>
      bool reprogramme(byte[] bin, int length);
      #if SILVERLIGHT
      IAsyncResult Begin_reprogramme(AsyncCallback callback, object state, byte[] bin, int length);
      bool End_reprogramme(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Get debug state
      /// </summary>
      emDebugInfo getDebugState();
      #if SILVERLIGHT
      IAsyncResult Begin_getDebugState(AsyncCallback callback, object state, );
      emDebugInfo End_getDebugState(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Clears the sequence queue
      /// </summary>
      void clearSequences();
      #if SILVERLIGHT
      IAsyncResult Begin_clearSequences(AsyncCallback callback, object state, );
      void End_clearSequences(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Runs the queued sequences
      /// </summary>
      void runSequences();
      #if SILVERLIGHT
      IAsyncResult Begin_runSequences(AsyncCallback callback, object state, );
      void End_runSequences(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Pauses the running of queued sequences
      /// </summary>
      void stopSequences();
      #if SILVERLIGHT
      IAsyncResult Begin_stopSequences(AsyncCallback callback, object state, );
      void End_stopSequences(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Waits until the sequences have all completed
      /// </summary>
      void joinSequences();
      #if SILVERLIGHT
      IAsyncResult Begin_joinSequences(AsyncCallback callback, object state, );
      void End_joinSequences(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Queues something for the EM to do
      /// </summary>
      /// <param name="Item">Item to be queued</param>
      void appendSequenceAction(emSequenceItem Item);
      #if SILVERLIGHT
      IAsyncResult Begin_appendSequenceAction(AsyncCallback callback, object state, emSequenceItem Item);
      void End_appendSequenceAction(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Retrieves a sample buffer
      /// </summary>
      /// <param name="srcPin">Gets the buffer that was recorded by srcPin</param>
      emWaveForm getRecording(int srcPin);
      #if SILVERLIGHT
      IAsyncResult Begin_getRecording(AsyncCallback callback, object state, int srcPin);
      emWaveForm End_getRecording(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Clears a sample buffer associated with a pin
      /// </summary>
      /// <param name="srcPin">Recording pin</param>
      void clearRecording(int srcPin);
      #if SILVERLIGHT
      IAsyncResult Begin_clearRecording(AsyncCallback callback, object state, int srcPin);
      void End_clearRecording(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Gets the current FPGA core temperature
      /// </summary>
      int getTemperature();
      #if SILVERLIGHT
      IAsyncResult Begin_getTemperature(AsyncCallback callback, object state, );
      int End_getTemperature(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Configures where this EM should log to
      /// </summary>
      /// <param name="logServer">Definition of experiment name and log server</param>
      void setLogServer(emLogServerSettings logServer);
      #if SILVERLIGHT
      IAsyncResult Begin_setLogServer(AsyncCallback callback, object state, emLogServerSettings logServer);
      void End_setLogServer(IAsyncResult asyncResult);
      #endif
    }

    /// <summary>
    /// This is the definition of the API. These methods are what external programs will see when they connect.
    /// 
    /// All operations# return error info by throwing exceptions. Exceptions therefore should be processed, and not ignored.
    /// </summary>
    public class Client : Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      
      #if SILVERLIGHT
      public IAsyncResult Begin_ping(AsyncCallback callback, object state, )
      {
        return send_ping(callback, state);
      }

      public int End_ping(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_ping();
      }

      #endif

      /// <summary>
      /// Test for the existence of the service
      /// </summary>
      public int ping()
      {
        #if !SILVERLIGHT
        send_ping();
        return recv_ping();

        #else
        var asyncResult = Begin_ping(null, null, );
        return End_ping(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_ping(AsyncCallback callback, object state, )
      #else
      public void send_ping()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("ping", TMessageType.Call, seqid_));
        ping_args args = new ping_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_ping()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ping_result result = new ping_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ping failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_setLED(AsyncCallback callback, object state, int index, bool state)
      {
        return send_setLED(callback, state, index, state);
      }

      public void End_setLED(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_setLED();
      }

      #endif

      /// <summary>
      /// Set LED status
      /// </summary>
      /// <param name="index"></param>
      /// <param name="state"></param>
      public void setLED(int index, bool state)
      {
        #if !SILVERLIGHT
        send_setLED(index, state);
        recv_setLED();

        #else
        var asyncResult = Begin_setLED(null, null, index, state);
        End_setLED(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_setLED(AsyncCallback callback, object state, int index, bool state)
      #else
      public void send_setLED(int index, bool state)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("setLED", TMessageType.Call, seqid_));
        setLED_args args = new setLED_args();
        args.Index = index;
        args.State = state;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_setLED()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        setLED_result result = new setLED_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getMotherboardID(AsyncCallback callback, object state, )
      {
        return send_getMotherboardID(callback, state);
      }

      public string End_getMotherboardID(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getMotherboardID();
      }

      #endif

      /// <summary>
      /// Each motherboard should have an ID for logging, versioning etc
      /// </summary>
      public string getMotherboardID()
      {
        #if !SILVERLIGHT
        send_getMotherboardID();
        return recv_getMotherboardID();

        #else
        var asyncResult = Begin_getMotherboardID(null, null, );
        return End_getMotherboardID(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getMotherboardID(AsyncCallback callback, object state, )
      #else
      public void send_getMotherboardID()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getMotherboardID", TMessageType.Call, seqid_));
        getMotherboardID_args args = new getMotherboardID_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_getMotherboardID()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getMotherboardID_result result = new getMotherboardID_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getMotherboardID failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getMotherboardState(AsyncCallback callback, object state, )
      {
        return send_getMotherboardState(callback, state);
      }

      public string End_getMotherboardState(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getMotherboardState();
      }

      #endif

      /// <summary>
      /// Description of what the EM is currently doing
      /// </summary>
      public string getMotherboardState()
      {
        #if !SILVERLIGHT
        send_getMotherboardState();
        return recv_getMotherboardState();

        #else
        var asyncResult = Begin_getMotherboardState(null, null, );
        return End_getMotherboardState(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getMotherboardState(AsyncCallback callback, object state, )
      #else
      public void send_getMotherboardState()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getMotherboardState", TMessageType.Call, seqid_));
        getMotherboardState_args args = new getMotherboardState_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_getMotherboardState()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getMotherboardState_result result = new getMotherboardState_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getMotherboardState failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getLastError(AsyncCallback callback, object state, )
      {
        return send_getLastError(callback, state);
      }

      public string End_getLastError(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getLastError();
      }

      #endif

      /// <summary>
      /// See if there is any error message
      /// </summary>
      public string getLastError()
      {
        #if !SILVERLIGHT
        send_getLastError();
        return recv_getLastError();

        #else
        var asyncResult = Begin_getLastError(null, null, );
        return End_getLastError(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getLastError(AsyncCallback callback, object state, )
      #else
      public void send_getLastError()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getLastError", TMessageType.Call, seqid_));
        getLastError_args args = new getLastError_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_getLastError()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getLastError_result result = new getLastError_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getLastError failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_reset(AsyncCallback callback, object state, )
      {
        return send_reset(callback, state);
      }

      public bool End_reset(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_reset();
      }

      #endif

      /// <summary>
      /// Resets the motherboard to initial, default config. Returns true if OK
      /// </summary>
      public bool reset()
      {
        #if !SILVERLIGHT
        send_reset();
        return recv_reset();

        #else
        var asyncResult = Begin_reset(null, null, );
        return End_reset(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_reset(AsyncCallback callback, object state, )
      #else
      public void send_reset()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("reset", TMessageType.Call, seqid_));
        reset_args args = new reset_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_reset()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        reset_result result = new reset_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "reset failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_reprogramme(AsyncCallback callback, object state, byte[] bin, int length)
      {
        return send_reprogramme(callback, state, bin, length);
      }

      public bool End_reprogramme(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_reprogramme();
      }

      #endif

      /// <summary>
      /// Reprogramme the FPGA
      /// </summary>
      /// <param name="bin"></param>
      /// <param name="length"></param>
      public bool reprogramme(byte[] bin, int length)
      {
        #if !SILVERLIGHT
        send_reprogramme(bin, length);
        return recv_reprogramme();

        #else
        var asyncResult = Begin_reprogramme(null, null, bin, length);
        return End_reprogramme(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_reprogramme(AsyncCallback callback, object state, byte[] bin, int length)
      #else
      public void send_reprogramme(byte[] bin, int length)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("reprogramme", TMessageType.Call, seqid_));
        reprogramme_args args = new reprogramme_args();
        args.Bin = bin;
        args.Length = length;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_reprogramme()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        reprogramme_result result = new reprogramme_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "reprogramme failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getDebugState(AsyncCallback callback, object state, )
      {
        return send_getDebugState(callback, state);
      }

      public emDebugInfo End_getDebugState(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getDebugState();
      }

      #endif

      /// <summary>
      /// Get debug state
      /// </summary>
      public emDebugInfo getDebugState()
      {
        #if !SILVERLIGHT
        send_getDebugState();
        return recv_getDebugState();

        #else
        var asyncResult = Begin_getDebugState(null, null, );
        return End_getDebugState(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getDebugState(AsyncCallback callback, object state, )
      #else
      public void send_getDebugState()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getDebugState", TMessageType.Call, seqid_));
        getDebugState_args args = new getDebugState_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public emDebugInfo recv_getDebugState()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getDebugState_result result = new getDebugState_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getDebugState failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_clearSequences(AsyncCallback callback, object state, )
      {
        return send_clearSequences(callback, state);
      }

      public void End_clearSequences(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_clearSequences();
      }

      #endif

      /// <summary>
      /// Clears the sequence queue
      /// </summary>
      public void clearSequences()
      {
        #if !SILVERLIGHT
        send_clearSequences();
        recv_clearSequences();

        #else
        var asyncResult = Begin_clearSequences(null, null, );
        End_clearSequences(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_clearSequences(AsyncCallback callback, object state, )
      #else
      public void send_clearSequences()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("clearSequences", TMessageType.Call, seqid_));
        clearSequences_args args = new clearSequences_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_clearSequences()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        clearSequences_result result = new clearSequences_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_runSequences(AsyncCallback callback, object state, )
      {
        return send_runSequences(callback, state);
      }

      public void End_runSequences(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_runSequences();
      }

      #endif

      /// <summary>
      /// Runs the queued sequences
      /// </summary>
      public void runSequences()
      {
        #if !SILVERLIGHT
        send_runSequences();
        recv_runSequences();

        #else
        var asyncResult = Begin_runSequences(null, null, );
        End_runSequences(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_runSequences(AsyncCallback callback, object state, )
      #else
      public void send_runSequences()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("runSequences", TMessageType.Call, seqid_));
        runSequences_args args = new runSequences_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_runSequences()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        runSequences_result result = new runSequences_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_stopSequences(AsyncCallback callback, object state, )
      {
        return send_stopSequences(callback, state);
      }

      public void End_stopSequences(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_stopSequences();
      }

      #endif

      /// <summary>
      /// Pauses the running of queued sequences
      /// </summary>
      public void stopSequences()
      {
        #if !SILVERLIGHT
        send_stopSequences();
        recv_stopSequences();

        #else
        var asyncResult = Begin_stopSequences(null, null, );
        End_stopSequences(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_stopSequences(AsyncCallback callback, object state, )
      #else
      public void send_stopSequences()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("stopSequences", TMessageType.Call, seqid_));
        stopSequences_args args = new stopSequences_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_stopSequences()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        stopSequences_result result = new stopSequences_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_joinSequences(AsyncCallback callback, object state, )
      {
        return send_joinSequences(callback, state);
      }

      public void End_joinSequences(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_joinSequences();
      }

      #endif

      /// <summary>
      /// Waits until the sequences have all completed
      /// </summary>
      public void joinSequences()
      {
        #if !SILVERLIGHT
        send_joinSequences();
        recv_joinSequences();

        #else
        var asyncResult = Begin_joinSequences(null, null, );
        End_joinSequences(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_joinSequences(AsyncCallback callback, object state, )
      #else
      public void send_joinSequences()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("joinSequences", TMessageType.Call, seqid_));
        joinSequences_args args = new joinSequences_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_joinSequences()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        joinSequences_result result = new joinSequences_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_appendSequenceAction(AsyncCallback callback, object state, emSequenceItem Item)
      {
        return send_appendSequenceAction(callback, state, Item);
      }

      public void End_appendSequenceAction(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_appendSequenceAction();
      }

      #endif

      /// <summary>
      /// Queues something for the EM to do
      /// </summary>
      /// <param name="Item">Item to be queued</param>
      public void appendSequenceAction(emSequenceItem Item)
      {
        #if !SILVERLIGHT
        send_appendSequenceAction(Item);
        recv_appendSequenceAction();

        #else
        var asyncResult = Begin_appendSequenceAction(null, null, Item);
        End_appendSequenceAction(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_appendSequenceAction(AsyncCallback callback, object state, emSequenceItem Item)
      #else
      public void send_appendSequenceAction(emSequenceItem Item)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("appendSequenceAction", TMessageType.Call, seqid_));
        appendSequenceAction_args args = new appendSequenceAction_args();
        args.Item = Item;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_appendSequenceAction()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        appendSequenceAction_result result = new appendSequenceAction_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getRecording(AsyncCallback callback, object state, int srcPin)
      {
        return send_getRecording(callback, state, srcPin);
      }

      public emWaveForm End_getRecording(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getRecording();
      }

      #endif

      /// <summary>
      /// Retrieves a sample buffer
      /// </summary>
      /// <param name="srcPin">Gets the buffer that was recorded by srcPin</param>
      public emWaveForm getRecording(int srcPin)
      {
        #if !SILVERLIGHT
        send_getRecording(srcPin);
        return recv_getRecording();

        #else
        var asyncResult = Begin_getRecording(null, null, srcPin);
        return End_getRecording(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getRecording(AsyncCallback callback, object state, int srcPin)
      #else
      public void send_getRecording(int srcPin)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getRecording", TMessageType.Call, seqid_));
        getRecording_args args = new getRecording_args();
        args.SrcPin = srcPin;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public emWaveForm recv_getRecording()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getRecording_result result = new getRecording_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getRecording failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_clearRecording(AsyncCallback callback, object state, int srcPin)
      {
        return send_clearRecording(callback, state, srcPin);
      }

      public void End_clearRecording(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_clearRecording();
      }

      #endif

      /// <summary>
      /// Clears a sample buffer associated with a pin
      /// </summary>
      /// <param name="srcPin">Recording pin</param>
      public void clearRecording(int srcPin)
      {
        #if !SILVERLIGHT
        send_clearRecording(srcPin);
        recv_clearRecording();

        #else
        var asyncResult = Begin_clearRecording(null, null, srcPin);
        End_clearRecording(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_clearRecording(AsyncCallback callback, object state, int srcPin)
      #else
      public void send_clearRecording(int srcPin)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("clearRecording", TMessageType.Call, seqid_));
        clearRecording_args args = new clearRecording_args();
        args.SrcPin = srcPin;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_clearRecording()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        clearRecording_result result = new clearRecording_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getTemperature(AsyncCallback callback, object state, )
      {
        return send_getTemperature(callback, state);
      }

      public int End_getTemperature(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getTemperature();
      }

      #endif

      /// <summary>
      /// Gets the current FPGA core temperature
      /// </summary>
      public int getTemperature()
      {
        #if !SILVERLIGHT
        send_getTemperature();
        return recv_getTemperature();

        #else
        var asyncResult = Begin_getTemperature(null, null, );
        return End_getTemperature(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getTemperature(AsyncCallback callback, object state, )
      #else
      public void send_getTemperature()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getTemperature", TMessageType.Call, seqid_));
        getTemperature_args args = new getTemperature_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_getTemperature()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getTemperature_result result = new getTemperature_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getTemperature failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_setLogServer(AsyncCallback callback, object state, emLogServerSettings logServer)
      {
        return send_setLogServer(callback, state, logServer);
      }

      public void End_setLogServer(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_setLogServer();
      }

      #endif

      /// <summary>
      /// Configures where this EM should log to
      /// </summary>
      /// <param name="logServer">Definition of experiment name and log server</param>
      public void setLogServer(emLogServerSettings logServer)
      {
        #if !SILVERLIGHT
        send_setLogServer(logServer);
        recv_setLogServer();

        #else
        var asyncResult = Begin_setLogServer(null, null, logServer);
        End_setLogServer(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_setLogServer(AsyncCallback callback, object state, emLogServerSettings logServer)
      #else
      public void send_setLogServer(emLogServerSettings logServer)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("setLogServer", TMessageType.Call, seqid_));
        setLogServer_args args = new setLogServer_args();
        args.LogServer = logServer;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_setLogServer()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        setLogServer_result result = new setLogServer_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["ping"] = ping_Process;
        processMap_["setLED"] = setLED_Process;
        processMap_["getMotherboardID"] = getMotherboardID_Process;
        processMap_["getMotherboardState"] = getMotherboardState_Process;
        processMap_["getLastError"] = getLastError_Process;
        processMap_["reset"] = reset_Process;
        processMap_["reprogramme"] = reprogramme_Process;
        processMap_["getDebugState"] = getDebugState_Process;
        processMap_["clearSequences"] = clearSequences_Process;
        processMap_["runSequences"] = runSequences_Process;
        processMap_["stopSequences"] = stopSequences_Process;
        processMap_["joinSequences"] = joinSequences_Process;
        processMap_["appendSequenceAction"] = appendSequenceAction_Process;
        processMap_["getRecording"] = getRecording_Process;
        processMap_["clearRecording"] = clearRecording_Process;
        processMap_["getTemperature"] = getTemperature_Process;
        processMap_["setLogServer"] = setLogServer_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void ping_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ping_args args = new ping_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ping_result result = new ping_result();
        try {
          result.Success = iface_.ping();
        } catch (emException err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("ping", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void setLED_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        setLED_args args = new setLED_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        setLED_result result = new setLED_result();
        try {
          iface_.setLED(args.Index, args.State);
        } catch (emException err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("setLED", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getMotherboardID_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getMotherboardID_args args = new getMotherboardID_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getMotherboardID_result result = new getMotherboardID_result();
        try {
          result.Success = iface_.getMotherboardID();
        } catch (emException err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getMotherboardID", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getMotherboardState_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getMotherboardState_args args = new getMotherboardState_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getMotherboardState_result result = new getMotherboardState_result();
        try {
          result.Success = iface_.getMotherboardState();
        } catch (emException err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getMotherboardState", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getLastError_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getLastError_args args = new getLastError_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getLastError_result result = new getLastError_result();
        try {
          result.Success = iface_.getLastError();
        } catch (emException err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getLastError", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void reset_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        reset_args args = new reset_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        reset_result result = new reset_result();
        try {
          result.Success = iface_.reset();
        } catch (emException err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("reset", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void reprogramme_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        reprogramme_args args = new reprogramme_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        reprogramme_result result = new reprogramme_result();
        try {
          result.Success = iface_.reprogramme(args.Bin, args.Length);
        } catch (emException err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("reprogramme", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getDebugState_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getDebugState_args args = new getDebugState_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getDebugState_result result = new getDebugState_result();
        try {
          result.Success = iface_.getDebugState();
        } catch (emException err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getDebugState", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void clearSequences_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        clearSequences_args args = new clearSequences_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        clearSequences_result result = new clearSequences_result();
        try {
          iface_.clearSequences();
        } catch (emException err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("clearSequences", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void runSequences_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        runSequences_args args = new runSequences_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        runSequences_result result = new runSequences_result();
        try {
          iface_.runSequences();
        } catch (emException err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("runSequences", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void stopSequences_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        stopSequences_args args = new stopSequences_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        stopSequences_result result = new stopSequences_result();
        try {
          iface_.stopSequences();
        } catch (emException err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("stopSequences", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void joinSequences_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        joinSequences_args args = new joinSequences_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        joinSequences_result result = new joinSequences_result();
        try {
          iface_.joinSequences();
        } catch (emException err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("joinSequences", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void appendSequenceAction_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        appendSequenceAction_args args = new appendSequenceAction_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        appendSequenceAction_result result = new appendSequenceAction_result();
        try {
          iface_.appendSequenceAction(args.Item);
        } catch (emException err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("appendSequenceAction", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getRecording_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getRecording_args args = new getRecording_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getRecording_result result = new getRecording_result();
        try {
          result.Success = iface_.getRecording(args.SrcPin);
        } catch (emException err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getRecording", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void clearRecording_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        clearRecording_args args = new clearRecording_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        clearRecording_result result = new clearRecording_result();
        try {
          iface_.clearRecording(args.SrcPin);
        } catch (emException err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("clearRecording", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getTemperature_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getTemperature_args args = new getTemperature_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getTemperature_result result = new getTemperature_result();
        try {
          result.Success = iface_.getTemperature();
        } catch (emException err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getTemperature", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void setLogServer_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        setLogServer_args args = new setLogServer_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        setLogServer_result result = new setLogServer_result();
        try {
          iface_.setLogServer(args.LogServer);
        } catch (emException err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("setLogServer", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ping_args : TBase
    {

      public ping_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ping_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ping_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ping_result : TBase
    {
      private int _success;
      private emException _err;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public emException Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          this._err = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public ping_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new emException();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ping_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ping_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setLED_args : TBase
    {
      private int _index;
      private bool _state;

      public int Index
      {
        get
        {
          return _index;
        }
        set
        {
          __isset.index = true;
          this._index = value;
        }
      }

      public bool State
      {
        get
        {
          return _state;
        }
        set
        {
          __isset.state = true;
          this._state = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool index;
        public bool state;
      }

      public setLED_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Index = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Bool) {
                State = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("setLED_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.index) {
          field.Name = "index";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Index);
          oprot.WriteFieldEnd();
        }
        if (__isset.state) {
          field.Name = "state";
          field.Type = TType.Bool;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(State);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("setLED_args(");
        sb.Append("Index: ");
        sb.Append(Index);
        sb.Append(",State: ");
        sb.Append(State);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setLED_result : TBase
    {
      private emException _err;

      public emException Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          this._err = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public setLED_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new emException();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("setLED_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("setLED_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getMotherboardID_args : TBase
    {

      public getMotherboardID_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getMotherboardID_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getMotherboardID_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getMotherboardID_result : TBase
    {
      private string _success;
      private emException _err;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public emException Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          this._err = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getMotherboardID_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new emException();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getMotherboardID_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getMotherboardID_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getMotherboardState_args : TBase
    {

      public getMotherboardState_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getMotherboardState_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getMotherboardState_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getMotherboardState_result : TBase
    {
      private string _success;
      private emException _err;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public emException Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          this._err = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getMotherboardState_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new emException();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getMotherboardState_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getMotherboardState_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getLastError_args : TBase
    {

      public getLastError_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getLastError_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getLastError_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getLastError_result : TBase
    {
      private string _success;
      private emException _err;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public emException Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          this._err = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getLastError_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new emException();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getLastError_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getLastError_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reset_args : TBase
    {

      public reset_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reset_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reset_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reset_result : TBase
    {
      private bool _success;
      private emException _err;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public emException Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          this._err = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public reset_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new emException();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reset_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reset_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reprogramme_args : TBase
    {
      private byte[] _bin;
      private int _length;

      public byte[] Bin
      {
        get
        {
          return _bin;
        }
        set
        {
          __isset.bin = true;
          this._bin = value;
        }
      }

      public int Length
      {
        get
        {
          return _length;
        }
        set
        {
          __isset.length = true;
          this._length = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool bin;
        public bool length;
      }

      public reprogramme_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Bin = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Length = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reprogramme_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Bin != null && __isset.bin) {
          field.Name = "bin";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Bin);
          oprot.WriteFieldEnd();
        }
        if (__isset.length) {
          field.Name = "length";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Length);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reprogramme_args(");
        sb.Append("Bin: ");
        sb.Append(Bin);
        sb.Append(",Length: ");
        sb.Append(Length);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reprogramme_result : TBase
    {
      private bool _success;
      private emException _err;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public emException Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          this._err = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public reprogramme_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new emException();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reprogramme_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("reprogramme_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getDebugState_args : TBase
    {

      public getDebugState_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getDebugState_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getDebugState_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getDebugState_result : TBase
    {
      private emDebugInfo _success;
      private emException _err;

      public emDebugInfo Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public emException Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          this._err = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getDebugState_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new emDebugInfo();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new emException();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getDebugState_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getDebugState_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class clearSequences_args : TBase
    {

      public clearSequences_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("clearSequences_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("clearSequences_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class clearSequences_result : TBase
    {
      private emException _err;

      public emException Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          this._err = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public clearSequences_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new emException();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("clearSequences_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("clearSequences_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class runSequences_args : TBase
    {

      public runSequences_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("runSequences_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("runSequences_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class runSequences_result : TBase
    {
      private emException _err;

      public emException Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          this._err = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public runSequences_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new emException();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("runSequences_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("runSequences_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class stopSequences_args : TBase
    {

      public stopSequences_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("stopSequences_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("stopSequences_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class stopSequences_result : TBase
    {
      private emException _err;

      public emException Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          this._err = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public stopSequences_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new emException();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("stopSequences_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("stopSequences_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class joinSequences_args : TBase
    {

      public joinSequences_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("joinSequences_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("joinSequences_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class joinSequences_result : TBase
    {
      private emException _err;

      public emException Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          this._err = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public joinSequences_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new emException();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("joinSequences_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("joinSequences_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class appendSequenceAction_args : TBase
    {
      private emSequenceItem _Item;

      /// <summary>
      /// Item to be queued
      /// </summary>
      public emSequenceItem Item
      {
        get
        {
          return _Item;
        }
        set
        {
          __isset.Item = true;
          this._Item = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool Item;
      }

      public appendSequenceAction_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Item = new emSequenceItem();
                Item.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("appendSequenceAction_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Item != null && __isset.Item) {
          field.Name = "Item";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Item.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("appendSequenceAction_args(");
        sb.Append("Item: ");
        sb.Append(Item== null ? "<null>" : Item.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class appendSequenceAction_result : TBase
    {
      private emException _err;

      public emException Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          this._err = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public appendSequenceAction_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new emException();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("appendSequenceAction_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("appendSequenceAction_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getRecording_args : TBase
    {
      private int _srcPin;

      /// <summary>
      /// Gets the buffer that was recorded by srcPin
      /// </summary>
      public int SrcPin
      {
        get
        {
          return _srcPin;
        }
        set
        {
          __isset.srcPin = true;
          this._srcPin = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool srcPin;
      }

      public getRecording_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                SrcPin = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getRecording_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.srcPin) {
          field.Name = "srcPin";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(SrcPin);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getRecording_args(");
        sb.Append("SrcPin: ");
        sb.Append(SrcPin);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getRecording_result : TBase
    {
      private emWaveForm _success;
      private emException _err;

      public emWaveForm Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public emException Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          this._err = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getRecording_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new emWaveForm();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new emException();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getRecording_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getRecording_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class clearRecording_args : TBase
    {
      private int _srcPin;

      /// <summary>
      /// Recording pin
      /// </summary>
      public int SrcPin
      {
        get
        {
          return _srcPin;
        }
        set
        {
          __isset.srcPin = true;
          this._srcPin = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool srcPin;
      }

      public clearRecording_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                SrcPin = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("clearRecording_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.srcPin) {
          field.Name = "srcPin";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(SrcPin);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("clearRecording_args(");
        sb.Append("SrcPin: ");
        sb.Append(SrcPin);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class clearRecording_result : TBase
    {
      private emException _err;

      public emException Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          this._err = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public clearRecording_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new emException();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("clearRecording_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("clearRecording_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getTemperature_args : TBase
    {

      public getTemperature_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getTemperature_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getTemperature_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getTemperature_result : TBase
    {
      private int _success;
      private emException _err;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public emException Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          this._err = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getTemperature_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new emException();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getTemperature_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getTemperature_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setLogServer_args : TBase
    {
      private emLogServerSettings _logServer;

      /// <summary>
      /// Definition of experiment name and log server
      /// </summary>
      public emLogServerSettings LogServer
      {
        get
        {
          return _logServer;
        }
        set
        {
          __isset.logServer = true;
          this._logServer = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool logServer;
      }

      public setLogServer_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                LogServer = new emLogServerSettings();
                LogServer.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("setLogServer_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (LogServer != null && __isset.logServer) {
          field.Name = "logServer";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          LogServer.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("setLogServer_args(");
        sb.Append("LogServer: ");
        sb.Append(LogServer== null ? "<null>" : LogServer.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setLogServer_result : TBase
    {
      private emException _err;

      public emException Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          this._err = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public setLogServer_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new emException();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("setLogServer_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("setLogServer_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
