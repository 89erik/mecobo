/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace emInterfaces
{
  public partial class emLogServer {
    /// <summary>
    /// 
    /// </summary>
    public interface Iface {
      /// <summary>
      /// Make a unique experiment name based on time, date, etc
      /// </summary>
      /// <param name="baseName">User defined text to be incorporated into the experiment name</param>
      string createUniqueExperimentName(string baseName);
      #if SILVERLIGHT
      IAsyncResult Begin_createUniqueExperimentName(AsyncCallback callback, object state, string baseName);
      string End_createUniqueExperimentName(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Returns a structure encapsulating the server config
      /// </summary>
      /// <param name="uniqueExperimentName">The experiment name</param>
      emLogServerSettings getLogServerSettings(string uniqueExperimentName);
      #if SILVERLIGHT
      IAsyncResult Begin_getLogServerSettings(AsyncCallback callback, object state, string uniqueExperimentName);
      emLogServerSettings End_getLogServerSettings(IAsyncResult asyncResult);
      #endif
      void log(emLogServerSettings logServer, string message, emLogEventType messageType);
      #if SILVERLIGHT
      IAsyncResult Begin_log(AsyncCallback callback, object state, emLogServerSettings logServer, string message, emLogEventType messageType);
      void End_log(IAsyncResult asyncResult);
      #endif
    }

    /// <summary>
    /// 
    /// </summary>
    public class Client : Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      
      #if SILVERLIGHT
      public IAsyncResult Begin_createUniqueExperimentName(AsyncCallback callback, object state, string baseName)
      {
        return send_createUniqueExperimentName(callback, state, baseName);
      }

      public string End_createUniqueExperimentName(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_createUniqueExperimentName();
      }

      #endif

      /// <summary>
      /// Make a unique experiment name based on time, date, etc
      /// </summary>
      /// <param name="baseName">User defined text to be incorporated into the experiment name</param>
      public string createUniqueExperimentName(string baseName)
      {
        #if !SILVERLIGHT
        send_createUniqueExperimentName(baseName);
        return recv_createUniqueExperimentName();

        #else
        var asyncResult = Begin_createUniqueExperimentName(null, null, baseName);
        return End_createUniqueExperimentName(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_createUniqueExperimentName(AsyncCallback callback, object state, string baseName)
      #else
      public void send_createUniqueExperimentName(string baseName)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("createUniqueExperimentName", TMessageType.Call, seqid_));
        createUniqueExperimentName_args args = new createUniqueExperimentName_args();
        args.BaseName = baseName;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_createUniqueExperimentName()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        createUniqueExperimentName_result result = new createUniqueExperimentName_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createUniqueExperimentName failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getLogServerSettings(AsyncCallback callback, object state, string uniqueExperimentName)
      {
        return send_getLogServerSettings(callback, state, uniqueExperimentName);
      }

      public emLogServerSettings End_getLogServerSettings(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getLogServerSettings();
      }

      #endif

      /// <summary>
      /// Returns a structure encapsulating the server config
      /// </summary>
      /// <param name="uniqueExperimentName">The experiment name</param>
      public emLogServerSettings getLogServerSettings(string uniqueExperimentName)
      {
        #if !SILVERLIGHT
        send_getLogServerSettings(uniqueExperimentName);
        return recv_getLogServerSettings();

        #else
        var asyncResult = Begin_getLogServerSettings(null, null, uniqueExperimentName);
        return End_getLogServerSettings(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getLogServerSettings(AsyncCallback callback, object state, string uniqueExperimentName)
      #else
      public void send_getLogServerSettings(string uniqueExperimentName)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getLogServerSettings", TMessageType.Call, seqid_));
        getLogServerSettings_args args = new getLogServerSettings_args();
        args.UniqueExperimentName = uniqueExperimentName;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public emLogServerSettings recv_getLogServerSettings()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getLogServerSettings_result result = new getLogServerSettings_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getLogServerSettings failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_log(AsyncCallback callback, object state, emLogServerSettings logServer, string message, emLogEventType messageType)
      {
        return send_log(callback, state, logServer, message, messageType);
      }

      public void End_log(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_log();
      }

      #endif

      public void log(emLogServerSettings logServer, string message, emLogEventType messageType)
      {
        #if !SILVERLIGHT
        send_log(logServer, message, messageType);
        recv_log();

        #else
        var asyncResult = Begin_log(null, null, logServer, message, messageType);
        End_log(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_log(AsyncCallback callback, object state, emLogServerSettings logServer, string message, emLogEventType messageType)
      #else
      public void send_log(emLogServerSettings logServer, string message, emLogEventType messageType)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("log", TMessageType.Call, seqid_));
        log_args args = new log_args();
        args.LogServer = logServer;
        args.Message = message;
        args.MessageType = messageType;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_log()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        log_result result = new log_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["createUniqueExperimentName"] = createUniqueExperimentName_Process;
        processMap_["getLogServerSettings"] = getLogServerSettings_Process;
        processMap_["log"] = log_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void createUniqueExperimentName_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        createUniqueExperimentName_args args = new createUniqueExperimentName_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        createUniqueExperimentName_result result = new createUniqueExperimentName_result();
        try {
          result.Success = iface_.createUniqueExperimentName(args.BaseName);
        } catch (emException err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("createUniqueExperimentName", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getLogServerSettings_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getLogServerSettings_args args = new getLogServerSettings_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getLogServerSettings_result result = new getLogServerSettings_result();
        try {
          result.Success = iface_.getLogServerSettings(args.UniqueExperimentName);
        } catch (emException err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getLogServerSettings", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void log_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        log_args args = new log_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        log_result result = new log_result();
        try {
          iface_.log(args.LogServer, args.Message, args.MessageType);
        } catch (emException err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("log", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createUniqueExperimentName_args : TBase
    {
      private string _baseName;

      /// <summary>
      /// User defined text to be incorporated into the experiment name
      /// </summary>
      public string BaseName
      {
        get
        {
          return _baseName;
        }
        set
        {
          __isset.baseName = true;
          this._baseName = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool baseName;
      }

      public createUniqueExperimentName_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                BaseName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createUniqueExperimentName_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (BaseName != null && __isset.baseName) {
          field.Name = "baseName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(BaseName);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("createUniqueExperimentName_args(");
        sb.Append("BaseName: ");
        sb.Append(BaseName);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createUniqueExperimentName_result : TBase
    {
      private string _success;
      private emException _err;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public emException Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          this._err = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public createUniqueExperimentName_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new emException();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createUniqueExperimentName_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("createUniqueExperimentName_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getLogServerSettings_args : TBase
    {
      private string _uniqueExperimentName;

      /// <summary>
      /// The experiment name
      /// </summary>
      public string UniqueExperimentName
      {
        get
        {
          return _uniqueExperimentName;
        }
        set
        {
          __isset.uniqueExperimentName = true;
          this._uniqueExperimentName = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool uniqueExperimentName;
      }

      public getLogServerSettings_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                UniqueExperimentName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getLogServerSettings_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (UniqueExperimentName != null && __isset.uniqueExperimentName) {
          field.Name = "uniqueExperimentName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UniqueExperimentName);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getLogServerSettings_args(");
        sb.Append("UniqueExperimentName: ");
        sb.Append(UniqueExperimentName);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getLogServerSettings_result : TBase
    {
      private emLogServerSettings _success;
      private emException _err;

      public emLogServerSettings Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public emException Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          this._err = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getLogServerSettings_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new emLogServerSettings();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new emException();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getLogServerSettings_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getLogServerSettings_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class log_args : TBase
    {
      private emLogServerSettings _logServer;
      private string _message;
      private emLogEventType _messageType;

      /// <summary>
      /// Server and experiment details
      /// </summary>
      public emLogServerSettings LogServer
      {
        get
        {
          return _logServer;
        }
        set
        {
          __isset.logServer = true;
          this._logServer = value;
        }
      }

      /// <summary>
      /// Message to log
      /// </summary>
      public string Message
      {
        get
        {
          return _message;
        }
        set
        {
          __isset.message = true;
          this._message = value;
        }
      }

      /// <summary>
      /// What type of message is it
      /// 
      /// <seealso cref="emLogEventType"/>
      /// </summary>
      public emLogEventType MessageType
      {
        get
        {
          return _messageType;
        }
        set
        {
          __isset.messageType = true;
          this._messageType = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool logServer;
        public bool message;
        public bool messageType;
      }

      public log_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                LogServer = new emLogServerSettings();
                LogServer.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Message = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                MessageType = (emLogEventType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("log_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (LogServer != null && __isset.logServer) {
          field.Name = "logServer";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          LogServer.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Message != null && __isset.message) {
          field.Name = "message";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Message);
          oprot.WriteFieldEnd();
        }
        if (__isset.messageType) {
          field.Name = "messageType";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)MessageType);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("log_args(");
        sb.Append("LogServer: ");
        sb.Append(LogServer== null ? "<null>" : LogServer.ToString());
        sb.Append(",Message: ");
        sb.Append(Message);
        sb.Append(",MessageType: ");
        sb.Append(MessageType);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class log_result : TBase
    {
      private emException _err;

      public emException Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          this._err = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public log_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new emException();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("log_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("log_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
