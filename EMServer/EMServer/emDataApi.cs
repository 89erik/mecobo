/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace emInterfaces
{
  public partial class emDataApi {
    /// <summary>
    /// For efficiency, wave data is stored in a central repository. This means programs do not have to transfer the whole dataset around when working in a distributed fashion.
    /// 
    /// Wavebuffers are stored in a hashtable, as a {string,emWaveForm} pair.
    /// 
    /// Client applications need to tidy up the hashtable by deleting waveforms that are no longer used.
    /// 
    /// </summary>
    public interface Iface {
      /// <summary>
      /// Make a buffer of a certain length, returns its name
      /// </summary>
      /// <param name="length">The length</param>
      string createBuffer(long length);
      #if SILVERLIGHT
      IAsyncResult Begin_createBuffer(AsyncCallback callback, object state, long length);
      string End_createBuffer(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Frees the named buffer
      /// </summary>
      /// <param name="bufferName">The name of the buffer</param>
      void destroyBuffer(string bufferName);
      #if SILVERLIGHT
      IAsyncResult Begin_destroyBuffer(AsyncCallback callback, object state, string bufferName);
      void End_destroyBuffer(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Get the actual raw data
      /// </summary>
      /// <param name="bufferName">The name of the buffer</param>
      emWaveForm getBuffer(string bufferName);
      #if SILVERLIGHT
      IAsyncResult Begin_getBuffer(AsyncCallback callback, object state, string bufferName);
      emWaveForm End_getBuffer(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Creates a buffer from an existing sample
      /// </summary>
      /// <param name="samples">Existing source</param>
      string setBuffer(emWaveForm samples);
      #if SILVERLIGHT
      IAsyncResult Begin_setBuffer(AsyncCallback callback, object state, emWaveForm samples);
      string End_setBuffer(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Copies a buffer, returns the copies name
      /// </summary>
      /// <param name="bufferName"></param>
      string cloneBuffer(string bufferName);
      #if SILVERLIGHT
      IAsyncResult Begin_cloneBuffer(AsyncCallback callback, object state, string bufferName);
      string End_cloneBuffer(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Rename a buffer, can be used to make code human readable
      /// </summary>
      /// <param name="oldBufferName">The buffer to rename</param>
      /// <param name="newBufferName">The new name</param>
      void renameBuffer(string oldBufferName, string newBufferName);
      #if SILVERLIGHT
      IAsyncResult Begin_renameBuffer(AsyncCallback callback, object state, string oldBufferName, string newBufferName);
      void End_renameBuffer(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Rename a buffer
      /// </summary>
      /// <param name="bufferName">The buffer name</param>
      /// <param name="fileName">Where to save it to</param>
      void saveBuffer(string bufferName, string fileName);
      #if SILVERLIGHT
      IAsyncResult Begin_saveBuffer(AsyncCallback callback, object state, string bufferName, string fileName);
      void End_saveBuffer(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Load a buffer from disc. Returns the name of the new buffer
      /// </summary>
      /// <param name="fileName">File containing the buffer</param>
      string loadBuffer(string fileName);
      #if SILVERLIGHT
      IAsyncResult Begin_loadBuffer(AsyncCallback callback, object state, string fileName);
      string End_loadBuffer(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Element wise, compute difference of two buffers. Returns name of the output buffer.
      /// </summary>
      /// <param name="bufferA"></param>
      /// <param name="bufferB"></param>
      string absDifference(string bufferA, string bufferB);
      #if SILVERLIGHT
      IAsyncResult Begin_absDifference(AsyncCallback callback, object state, string bufferA, string bufferB);
      string End_absDifference(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Find the sum of the buffer
      /// </summary>
      /// <param name="bufferName"></param>
      double sum(string bufferName);
      #if SILVERLIGHT
      IAsyncResult Begin_sum(AsyncCallback callback, object state, string bufferName);
      double End_sum(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Computes the sum squared difference of two buffers
      /// </summary>
      /// <param name="bufferA"></param>
      /// <param name="bufferB"></param>
      double sumSquaredDifference(string bufferA, string bufferB);
      #if SILVERLIGHT
      IAsyncResult Begin_sumSquaredDifference(AsyncCallback callback, object state, string bufferA, string bufferB);
      double End_sumSquaredDifference(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Element wise subtraction, e.g. bufferA[n] - bufferB[n]. Returns name of the output buffer.
      /// </summary>
      /// <param name="bufferA"></param>
      /// <param name="bufferB"></param>
      string subtract(string bufferA, string bufferB);
      #if SILVERLIGHT
      IAsyncResult Begin_subtract(AsyncCallback callback, object state, string bufferA, string bufferB);
      string End_subtract(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Element wise addition, e.g. bufferA[n] +  bufferB[n]. Returns name of the output buffer.
      /// </summary>
      /// <param name="bufferA"></param>
      /// <param name="bufferB"></param>
      string add(string bufferA, string bufferB);
      #if SILVERLIGHT
      IAsyncResult Begin_add(AsyncCallback callback, object state, string bufferA, string bufferB);
      string End_add(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Set all the values in the buffer to value
      /// </summary>
      /// <param name="bufferName">Buffer name</param>
      /// <param name="value">New value</param>
      void setValues(string bufferName, int value);
      #if SILVERLIGHT
      IAsyncResult Begin_setValues(AsyncCallback callback, object state, string bufferName, int value);
      void End_setValues(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// if value<threshold, 0 else maxValue. invert does the opposite. Returns name of new buffer
      /// </summary>
      /// <param name="bufferName">Buffer name</param>
      /// <param name="thresholdValue">Value to test against</param>
      /// <param name="maxValue">Value to set if condition is met</param>
      /// <param name="invert">Invert response</param>
      string threshold(string bufferName, int thresholdValue, int maxValue, bool invert);
      #if SILVERLIGHT
      IAsyncResult Begin_threshold(AsyncCallback callback, object state, string bufferName, int thresholdValue, int maxValue, bool invert);
      string End_threshold(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Normalize the data. Returns name of new buffer
      /// </summary>
      /// <param name="bufferName">Buffer name</param>
      /// <param name="minValue">Normalize from</param>
      /// <param name="maxValue">Normalize to</param>
      string normalize(string bufferName, int minValue, int maxValue);
      #if SILVERLIGHT
      IAsyncResult Begin_normalize(AsyncCallback callback, object state, string bufferName, int minValue, int maxValue);
      string End_normalize(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Quantize the data to discrete levels. Returns name of new buffer
      /// </summary>
      /// <param name="bufferName">Buffer name</param>
      /// <param name="minValue">Normalize from</param>
      /// <param name="maxValue">Normalize to</param>
      /// <param name="levels">How many discrete levels to quantize to</param>
      string quantize(string bufferName, int minValue, int maxValue, int levels);
      #if SILVERLIGHT
      IAsyncResult Begin_quantize(AsyncCallback callback, object state, string bufferName, int minValue, int maxValue, int levels);
      string End_quantize(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Resize the data buffer. Returns name of new buffer.
      /// </summary>
      /// <param name="bufferName">Buffer name</param>
      /// <param name="newLength">Number of samples in returned buffer</param>
      string resample(string bufferName, int newLength);
      #if SILVERLIGHT
      IAsyncResult Begin_resample(AsyncCallback callback, object state, string bufferName, int newLength);
      string End_resample(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Applies the median filter for noise supression.  Returns name of new buffer.
      /// </summary>
      /// <param name="bufferName">Buffer name</param>
      /// <param name="fitlerSize">Strength of the filter. Larger number is stronger. Must be >=1</param>
      string medianFilter(string bufferName, int fitlerSize);
      #if SILVERLIGHT
      IAsyncResult Begin_medianFilter(AsyncCallback callback, object state, string bufferName, int fitlerSize);
      string End_medianFilter(IAsyncResult asyncResult);
      #endif
    }

    /// <summary>
    /// For efficiency, wave data is stored in a central repository. This means programs do not have to transfer the whole dataset around when working in a distributed fashion.
    /// 
    /// Wavebuffers are stored in a hashtable, as a {string,emWaveForm} pair.
    /// 
    /// Client applications need to tidy up the hashtable by deleting waveforms that are no longer used.
    /// 
    /// </summary>
    public class Client : Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      
      #if SILVERLIGHT
      public IAsyncResult Begin_createBuffer(AsyncCallback callback, object state, long length)
      {
        return send_createBuffer(callback, state, length);
      }

      public string End_createBuffer(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_createBuffer();
      }

      #endif

      /// <summary>
      /// Make a buffer of a certain length, returns its name
      /// </summary>
      /// <param name="length">The length</param>
      public string createBuffer(long length)
      {
        #if !SILVERLIGHT
        send_createBuffer(length);
        return recv_createBuffer();

        #else
        var asyncResult = Begin_createBuffer(null, null, length);
        return End_createBuffer(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_createBuffer(AsyncCallback callback, object state, long length)
      #else
      public void send_createBuffer(long length)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("createBuffer", TMessageType.Call, seqid_));
        createBuffer_args args = new createBuffer_args();
        args.Length = length;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_createBuffer()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        createBuffer_result result = new createBuffer_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createBuffer failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_destroyBuffer(AsyncCallback callback, object state, string bufferName)
      {
        return send_destroyBuffer(callback, state, bufferName);
      }

      public void End_destroyBuffer(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_destroyBuffer();
      }

      #endif

      /// <summary>
      /// Frees the named buffer
      /// </summary>
      /// <param name="bufferName">The name of the buffer</param>
      public void destroyBuffer(string bufferName)
      {
        #if !SILVERLIGHT
        send_destroyBuffer(bufferName);
        recv_destroyBuffer();

        #else
        var asyncResult = Begin_destroyBuffer(null, null, bufferName);
        End_destroyBuffer(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_destroyBuffer(AsyncCallback callback, object state, string bufferName)
      #else
      public void send_destroyBuffer(string bufferName)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("destroyBuffer", TMessageType.Call, seqid_));
        destroyBuffer_args args = new destroyBuffer_args();
        args.BufferName = bufferName;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_destroyBuffer()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        destroyBuffer_result result = new destroyBuffer_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getBuffer(AsyncCallback callback, object state, string bufferName)
      {
        return send_getBuffer(callback, state, bufferName);
      }

      public emWaveForm End_getBuffer(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getBuffer();
      }

      #endif

      /// <summary>
      /// Get the actual raw data
      /// </summary>
      /// <param name="bufferName">The name of the buffer</param>
      public emWaveForm getBuffer(string bufferName)
      {
        #if !SILVERLIGHT
        send_getBuffer(bufferName);
        return recv_getBuffer();

        #else
        var asyncResult = Begin_getBuffer(null, null, bufferName);
        return End_getBuffer(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getBuffer(AsyncCallback callback, object state, string bufferName)
      #else
      public void send_getBuffer(string bufferName)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getBuffer", TMessageType.Call, seqid_));
        getBuffer_args args = new getBuffer_args();
        args.BufferName = bufferName;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public emWaveForm recv_getBuffer()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getBuffer_result result = new getBuffer_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getBuffer failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_setBuffer(AsyncCallback callback, object state, emWaveForm samples)
      {
        return send_setBuffer(callback, state, samples);
      }

      public string End_setBuffer(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_setBuffer();
      }

      #endif

      /// <summary>
      /// Creates a buffer from an existing sample
      /// </summary>
      /// <param name="samples">Existing source</param>
      public string setBuffer(emWaveForm samples)
      {
        #if !SILVERLIGHT
        send_setBuffer(samples);
        return recv_setBuffer();

        #else
        var asyncResult = Begin_setBuffer(null, null, samples);
        return End_setBuffer(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_setBuffer(AsyncCallback callback, object state, emWaveForm samples)
      #else
      public void send_setBuffer(emWaveForm samples)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("setBuffer", TMessageType.Call, seqid_));
        setBuffer_args args = new setBuffer_args();
        args.Samples = samples;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_setBuffer()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        setBuffer_result result = new setBuffer_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "setBuffer failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_cloneBuffer(AsyncCallback callback, object state, string bufferName)
      {
        return send_cloneBuffer(callback, state, bufferName);
      }

      public string End_cloneBuffer(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_cloneBuffer();
      }

      #endif

      /// <summary>
      /// Copies a buffer, returns the copies name
      /// </summary>
      /// <param name="bufferName"></param>
      public string cloneBuffer(string bufferName)
      {
        #if !SILVERLIGHT
        send_cloneBuffer(bufferName);
        return recv_cloneBuffer();

        #else
        var asyncResult = Begin_cloneBuffer(null, null, bufferName);
        return End_cloneBuffer(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_cloneBuffer(AsyncCallback callback, object state, string bufferName)
      #else
      public void send_cloneBuffer(string bufferName)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("cloneBuffer", TMessageType.Call, seqid_));
        cloneBuffer_args args = new cloneBuffer_args();
        args.BufferName = bufferName;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_cloneBuffer()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        cloneBuffer_result result = new cloneBuffer_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "cloneBuffer failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_renameBuffer(AsyncCallback callback, object state, string oldBufferName, string newBufferName)
      {
        return send_renameBuffer(callback, state, oldBufferName, newBufferName);
      }

      public void End_renameBuffer(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_renameBuffer();
      }

      #endif

      /// <summary>
      /// Rename a buffer, can be used to make code human readable
      /// </summary>
      /// <param name="oldBufferName">The buffer to rename</param>
      /// <param name="newBufferName">The new name</param>
      public void renameBuffer(string oldBufferName, string newBufferName)
      {
        #if !SILVERLIGHT
        send_renameBuffer(oldBufferName, newBufferName);
        recv_renameBuffer();

        #else
        var asyncResult = Begin_renameBuffer(null, null, oldBufferName, newBufferName);
        End_renameBuffer(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_renameBuffer(AsyncCallback callback, object state, string oldBufferName, string newBufferName)
      #else
      public void send_renameBuffer(string oldBufferName, string newBufferName)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("renameBuffer", TMessageType.Call, seqid_));
        renameBuffer_args args = new renameBuffer_args();
        args.OldBufferName = oldBufferName;
        args.NewBufferName = newBufferName;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_renameBuffer()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        renameBuffer_result result = new renameBuffer_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_saveBuffer(AsyncCallback callback, object state, string bufferName, string fileName)
      {
        return send_saveBuffer(callback, state, bufferName, fileName);
      }

      public void End_saveBuffer(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_saveBuffer();
      }

      #endif

      /// <summary>
      /// Rename a buffer
      /// </summary>
      /// <param name="bufferName">The buffer name</param>
      /// <param name="fileName">Where to save it to</param>
      public void saveBuffer(string bufferName, string fileName)
      {
        #if !SILVERLIGHT
        send_saveBuffer(bufferName, fileName);
        recv_saveBuffer();

        #else
        var asyncResult = Begin_saveBuffer(null, null, bufferName, fileName);
        End_saveBuffer(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_saveBuffer(AsyncCallback callback, object state, string bufferName, string fileName)
      #else
      public void send_saveBuffer(string bufferName, string fileName)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("saveBuffer", TMessageType.Call, seqid_));
        saveBuffer_args args = new saveBuffer_args();
        args.BufferName = bufferName;
        args.FileName = fileName;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_saveBuffer()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        saveBuffer_result result = new saveBuffer_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_loadBuffer(AsyncCallback callback, object state, string fileName)
      {
        return send_loadBuffer(callback, state, fileName);
      }

      public string End_loadBuffer(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_loadBuffer();
      }

      #endif

      /// <summary>
      /// Load a buffer from disc. Returns the name of the new buffer
      /// </summary>
      /// <param name="fileName">File containing the buffer</param>
      public string loadBuffer(string fileName)
      {
        #if !SILVERLIGHT
        send_loadBuffer(fileName);
        return recv_loadBuffer();

        #else
        var asyncResult = Begin_loadBuffer(null, null, fileName);
        return End_loadBuffer(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_loadBuffer(AsyncCallback callback, object state, string fileName)
      #else
      public void send_loadBuffer(string fileName)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("loadBuffer", TMessageType.Call, seqid_));
        loadBuffer_args args = new loadBuffer_args();
        args.FileName = fileName;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_loadBuffer()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        loadBuffer_result result = new loadBuffer_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "loadBuffer failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_absDifference(AsyncCallback callback, object state, string bufferA, string bufferB)
      {
        return send_absDifference(callback, state, bufferA, bufferB);
      }

      public string End_absDifference(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_absDifference();
      }

      #endif

      /// <summary>
      /// Element wise, compute difference of two buffers. Returns name of the output buffer.
      /// </summary>
      /// <param name="bufferA"></param>
      /// <param name="bufferB"></param>
      public string absDifference(string bufferA, string bufferB)
      {
        #if !SILVERLIGHT
        send_absDifference(bufferA, bufferB);
        return recv_absDifference();

        #else
        var asyncResult = Begin_absDifference(null, null, bufferA, bufferB);
        return End_absDifference(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_absDifference(AsyncCallback callback, object state, string bufferA, string bufferB)
      #else
      public void send_absDifference(string bufferA, string bufferB)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("absDifference", TMessageType.Call, seqid_));
        absDifference_args args = new absDifference_args();
        args.BufferA = bufferA;
        args.BufferB = bufferB;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_absDifference()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        absDifference_result result = new absDifference_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "absDifference failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_sum(AsyncCallback callback, object state, string bufferName)
      {
        return send_sum(callback, state, bufferName);
      }

      public double End_sum(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_sum();
      }

      #endif

      /// <summary>
      /// Find the sum of the buffer
      /// </summary>
      /// <param name="bufferName"></param>
      public double sum(string bufferName)
      {
        #if !SILVERLIGHT
        send_sum(bufferName);
        return recv_sum();

        #else
        var asyncResult = Begin_sum(null, null, bufferName);
        return End_sum(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_sum(AsyncCallback callback, object state, string bufferName)
      #else
      public void send_sum(string bufferName)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("sum", TMessageType.Call, seqid_));
        sum_args args = new sum_args();
        args.BufferName = bufferName;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public double recv_sum()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        sum_result result = new sum_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sum failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_sumSquaredDifference(AsyncCallback callback, object state, string bufferA, string bufferB)
      {
        return send_sumSquaredDifference(callback, state, bufferA, bufferB);
      }

      public double End_sumSquaredDifference(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_sumSquaredDifference();
      }

      #endif

      /// <summary>
      /// Computes the sum squared difference of two buffers
      /// </summary>
      /// <param name="bufferA"></param>
      /// <param name="bufferB"></param>
      public double sumSquaredDifference(string bufferA, string bufferB)
      {
        #if !SILVERLIGHT
        send_sumSquaredDifference(bufferA, bufferB);
        return recv_sumSquaredDifference();

        #else
        var asyncResult = Begin_sumSquaredDifference(null, null, bufferA, bufferB);
        return End_sumSquaredDifference(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_sumSquaredDifference(AsyncCallback callback, object state, string bufferA, string bufferB)
      #else
      public void send_sumSquaredDifference(string bufferA, string bufferB)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("sumSquaredDifference", TMessageType.Call, seqid_));
        sumSquaredDifference_args args = new sumSquaredDifference_args();
        args.BufferA = bufferA;
        args.BufferB = bufferB;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public double recv_sumSquaredDifference()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        sumSquaredDifference_result result = new sumSquaredDifference_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sumSquaredDifference failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_subtract(AsyncCallback callback, object state, string bufferA, string bufferB)
      {
        return send_subtract(callback, state, bufferA, bufferB);
      }

      public string End_subtract(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_subtract();
      }

      #endif

      /// <summary>
      /// Element wise subtraction, e.g. bufferA[n] - bufferB[n]. Returns name of the output buffer.
      /// </summary>
      /// <param name="bufferA"></param>
      /// <param name="bufferB"></param>
      public string subtract(string bufferA, string bufferB)
      {
        #if !SILVERLIGHT
        send_subtract(bufferA, bufferB);
        return recv_subtract();

        #else
        var asyncResult = Begin_subtract(null, null, bufferA, bufferB);
        return End_subtract(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_subtract(AsyncCallback callback, object state, string bufferA, string bufferB)
      #else
      public void send_subtract(string bufferA, string bufferB)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("subtract", TMessageType.Call, seqid_));
        subtract_args args = new subtract_args();
        args.BufferA = bufferA;
        args.BufferB = bufferB;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_subtract()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        subtract_result result = new subtract_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "subtract failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_add(AsyncCallback callback, object state, string bufferA, string bufferB)
      {
        return send_add(callback, state, bufferA, bufferB);
      }

      public string End_add(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_add();
      }

      #endif

      /// <summary>
      /// Element wise addition, e.g. bufferA[n] +  bufferB[n]. Returns name of the output buffer.
      /// </summary>
      /// <param name="bufferA"></param>
      /// <param name="bufferB"></param>
      public string add(string bufferA, string bufferB)
      {
        #if !SILVERLIGHT
        send_add(bufferA, bufferB);
        return recv_add();

        #else
        var asyncResult = Begin_add(null, null, bufferA, bufferB);
        return End_add(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_add(AsyncCallback callback, object state, string bufferA, string bufferB)
      #else
      public void send_add(string bufferA, string bufferB)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("add", TMessageType.Call, seqid_));
        add_args args = new add_args();
        args.BufferA = bufferA;
        args.BufferB = bufferB;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_add()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        add_result result = new add_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "add failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_setValues(AsyncCallback callback, object state, string bufferName, int value)
      {
        return send_setValues(callback, state, bufferName, value);
      }

      public void End_setValues(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_setValues();
      }

      #endif

      /// <summary>
      /// Set all the values in the buffer to value
      /// </summary>
      /// <param name="bufferName">Buffer name</param>
      /// <param name="value">New value</param>
      public void setValues(string bufferName, int value)
      {
        #if !SILVERLIGHT
        send_setValues(bufferName, value);
        recv_setValues();

        #else
        var asyncResult = Begin_setValues(null, null, bufferName, value);
        End_setValues(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_setValues(AsyncCallback callback, object state, string bufferName, int value)
      #else
      public void send_setValues(string bufferName, int value)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("setValues", TMessageType.Call, seqid_));
        setValues_args args = new setValues_args();
        args.BufferName = bufferName;
        args.Value = value;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_setValues()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        setValues_result result = new setValues_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err) {
          throw result.Err;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_threshold(AsyncCallback callback, object state, string bufferName, int thresholdValue, int maxValue, bool invert)
      {
        return send_threshold(callback, state, bufferName, thresholdValue, maxValue, invert);
      }

      public string End_threshold(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_threshold();
      }

      #endif

      /// <summary>
      /// if value<threshold, 0 else maxValue. invert does the opposite. Returns name of new buffer
      /// </summary>
      /// <param name="bufferName">Buffer name</param>
      /// <param name="thresholdValue">Value to test against</param>
      /// <param name="maxValue">Value to set if condition is met</param>
      /// <param name="invert">Invert response</param>
      public string threshold(string bufferName, int thresholdValue, int maxValue, bool invert)
      {
        #if !SILVERLIGHT
        send_threshold(bufferName, thresholdValue, maxValue, invert);
        return recv_threshold();

        #else
        var asyncResult = Begin_threshold(null, null, bufferName, thresholdValue, maxValue, invert);
        return End_threshold(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_threshold(AsyncCallback callback, object state, string bufferName, int thresholdValue, int maxValue, bool invert)
      #else
      public void send_threshold(string bufferName, int thresholdValue, int maxValue, bool invert)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("threshold", TMessageType.Call, seqid_));
        threshold_args args = new threshold_args();
        args.BufferName = bufferName;
        args.ThresholdValue = thresholdValue;
        args.MaxValue = maxValue;
        args.Invert = invert;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_threshold()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        threshold_result result = new threshold_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "threshold failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_normalize(AsyncCallback callback, object state, string bufferName, int minValue, int maxValue)
      {
        return send_normalize(callback, state, bufferName, minValue, maxValue);
      }

      public string End_normalize(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_normalize();
      }

      #endif

      /// <summary>
      /// Normalize the data. Returns name of new buffer
      /// </summary>
      /// <param name="bufferName">Buffer name</param>
      /// <param name="minValue">Normalize from</param>
      /// <param name="maxValue">Normalize to</param>
      public string normalize(string bufferName, int minValue, int maxValue)
      {
        #if !SILVERLIGHT
        send_normalize(bufferName, minValue, maxValue);
        return recv_normalize();

        #else
        var asyncResult = Begin_normalize(null, null, bufferName, minValue, maxValue);
        return End_normalize(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_normalize(AsyncCallback callback, object state, string bufferName, int minValue, int maxValue)
      #else
      public void send_normalize(string bufferName, int minValue, int maxValue)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("normalize", TMessageType.Call, seqid_));
        normalize_args args = new normalize_args();
        args.BufferName = bufferName;
        args.MinValue = minValue;
        args.MaxValue = maxValue;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_normalize()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        normalize_result result = new normalize_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "normalize failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_quantize(AsyncCallback callback, object state, string bufferName, int minValue, int maxValue, int levels)
      {
        return send_quantize(callback, state, bufferName, minValue, maxValue, levels);
      }

      public string End_quantize(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_quantize();
      }

      #endif

      /// <summary>
      /// Quantize the data to discrete levels. Returns name of new buffer
      /// </summary>
      /// <param name="bufferName">Buffer name</param>
      /// <param name="minValue">Normalize from</param>
      /// <param name="maxValue">Normalize to</param>
      /// <param name="levels">How many discrete levels to quantize to</param>
      public string quantize(string bufferName, int minValue, int maxValue, int levels)
      {
        #if !SILVERLIGHT
        send_quantize(bufferName, minValue, maxValue, levels);
        return recv_quantize();

        #else
        var asyncResult = Begin_quantize(null, null, bufferName, minValue, maxValue, levels);
        return End_quantize(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_quantize(AsyncCallback callback, object state, string bufferName, int minValue, int maxValue, int levels)
      #else
      public void send_quantize(string bufferName, int minValue, int maxValue, int levels)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("quantize", TMessageType.Call, seqid_));
        quantize_args args = new quantize_args();
        args.BufferName = bufferName;
        args.MinValue = minValue;
        args.MaxValue = maxValue;
        args.Levels = levels;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_quantize()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        quantize_result result = new quantize_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "quantize failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_resample(AsyncCallback callback, object state, string bufferName, int newLength)
      {
        return send_resample(callback, state, bufferName, newLength);
      }

      public string End_resample(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_resample();
      }

      #endif

      /// <summary>
      /// Resize the data buffer. Returns name of new buffer.
      /// </summary>
      /// <param name="bufferName">Buffer name</param>
      /// <param name="newLength">Number of samples in returned buffer</param>
      public string resample(string bufferName, int newLength)
      {
        #if !SILVERLIGHT
        send_resample(bufferName, newLength);
        return recv_resample();

        #else
        var asyncResult = Begin_resample(null, null, bufferName, newLength);
        return End_resample(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_resample(AsyncCallback callback, object state, string bufferName, int newLength)
      #else
      public void send_resample(string bufferName, int newLength)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("resample", TMessageType.Call, seqid_));
        resample_args args = new resample_args();
        args.BufferName = bufferName;
        args.NewLength = newLength;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_resample()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        resample_result result = new resample_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "resample failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_medianFilter(AsyncCallback callback, object state, string bufferName, int fitlerSize)
      {
        return send_medianFilter(callback, state, bufferName, fitlerSize);
      }

      public string End_medianFilter(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_medianFilter();
      }

      #endif

      /// <summary>
      /// Applies the median filter for noise supression.  Returns name of new buffer.
      /// </summary>
      /// <param name="bufferName">Buffer name</param>
      /// <param name="fitlerSize">Strength of the filter. Larger number is stronger. Must be >=1</param>
      public string medianFilter(string bufferName, int fitlerSize)
      {
        #if !SILVERLIGHT
        send_medianFilter(bufferName, fitlerSize);
        return recv_medianFilter();

        #else
        var asyncResult = Begin_medianFilter(null, null, bufferName, fitlerSize);
        return End_medianFilter(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_medianFilter(AsyncCallback callback, object state, string bufferName, int fitlerSize)
      #else
      public void send_medianFilter(string bufferName, int fitlerSize)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("medianFilter", TMessageType.Call, seqid_));
        medianFilter_args args = new medianFilter_args();
        args.BufferName = bufferName;
        args.FitlerSize = fitlerSize;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_medianFilter()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        medianFilter_result result = new medianFilter_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "medianFilter failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["createBuffer"] = createBuffer_Process;
        processMap_["destroyBuffer"] = destroyBuffer_Process;
        processMap_["getBuffer"] = getBuffer_Process;
        processMap_["setBuffer"] = setBuffer_Process;
        processMap_["cloneBuffer"] = cloneBuffer_Process;
        processMap_["renameBuffer"] = renameBuffer_Process;
        processMap_["saveBuffer"] = saveBuffer_Process;
        processMap_["loadBuffer"] = loadBuffer_Process;
        processMap_["absDifference"] = absDifference_Process;
        processMap_["sum"] = sum_Process;
        processMap_["sumSquaredDifference"] = sumSquaredDifference_Process;
        processMap_["subtract"] = subtract_Process;
        processMap_["add"] = add_Process;
        processMap_["setValues"] = setValues_Process;
        processMap_["threshold"] = threshold_Process;
        processMap_["normalize"] = normalize_Process;
        processMap_["quantize"] = quantize_Process;
        processMap_["resample"] = resample_Process;
        processMap_["medianFilter"] = medianFilter_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void createBuffer_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        createBuffer_args args = new createBuffer_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        createBuffer_result result = new createBuffer_result();
        try {
          result.Success = iface_.createBuffer(args.Length);
        } catch (emException err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("createBuffer", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void destroyBuffer_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        destroyBuffer_args args = new destroyBuffer_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        destroyBuffer_result result = new destroyBuffer_result();
        try {
          iface_.destroyBuffer(args.BufferName);
        } catch (emException err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("destroyBuffer", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getBuffer_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getBuffer_args args = new getBuffer_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getBuffer_result result = new getBuffer_result();
        try {
          result.Success = iface_.getBuffer(args.BufferName);
        } catch (emException err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("getBuffer", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void setBuffer_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        setBuffer_args args = new setBuffer_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        setBuffer_result result = new setBuffer_result();
        try {
          result.Success = iface_.setBuffer(args.Samples);
        } catch (emException err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("setBuffer", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void cloneBuffer_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        cloneBuffer_args args = new cloneBuffer_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        cloneBuffer_result result = new cloneBuffer_result();
        try {
          result.Success = iface_.cloneBuffer(args.BufferName);
        } catch (emException err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("cloneBuffer", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void renameBuffer_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        renameBuffer_args args = new renameBuffer_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        renameBuffer_result result = new renameBuffer_result();
        try {
          iface_.renameBuffer(args.OldBufferName, args.NewBufferName);
        } catch (emException err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("renameBuffer", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void saveBuffer_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        saveBuffer_args args = new saveBuffer_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        saveBuffer_result result = new saveBuffer_result();
        try {
          iface_.saveBuffer(args.BufferName, args.FileName);
        } catch (emException err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("saveBuffer", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void loadBuffer_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        loadBuffer_args args = new loadBuffer_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        loadBuffer_result result = new loadBuffer_result();
        try {
          result.Success = iface_.loadBuffer(args.FileName);
        } catch (emException err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("loadBuffer", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void absDifference_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        absDifference_args args = new absDifference_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        absDifference_result result = new absDifference_result();
        try {
          result.Success = iface_.absDifference(args.BufferA, args.BufferB);
        } catch (emException err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("absDifference", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void sum_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        sum_args args = new sum_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        sum_result result = new sum_result();
        try {
          result.Success = iface_.sum(args.BufferName);
        } catch (emException err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("sum", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void sumSquaredDifference_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        sumSquaredDifference_args args = new sumSquaredDifference_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        sumSquaredDifference_result result = new sumSquaredDifference_result();
        try {
          result.Success = iface_.sumSquaredDifference(args.BufferA, args.BufferB);
        } catch (emException err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("sumSquaredDifference", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void subtract_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        subtract_args args = new subtract_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        subtract_result result = new subtract_result();
        try {
          result.Success = iface_.subtract(args.BufferA, args.BufferB);
        } catch (emException err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("subtract", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void add_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        add_args args = new add_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        add_result result = new add_result();
        try {
          result.Success = iface_.add(args.BufferA, args.BufferB);
        } catch (emException err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("add", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void setValues_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        setValues_args args = new setValues_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        setValues_result result = new setValues_result();
        try {
          iface_.setValues(args.BufferName, args.Value);
        } catch (emException err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("setValues", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void threshold_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        threshold_args args = new threshold_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        threshold_result result = new threshold_result();
        try {
          result.Success = iface_.threshold(args.BufferName, args.ThresholdValue, args.MaxValue, args.Invert);
        } catch (emException err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("threshold", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void normalize_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        normalize_args args = new normalize_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        normalize_result result = new normalize_result();
        try {
          result.Success = iface_.normalize(args.BufferName, args.MinValue, args.MaxValue);
        } catch (emException err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("normalize", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void quantize_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        quantize_args args = new quantize_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        quantize_result result = new quantize_result();
        try {
          result.Success = iface_.quantize(args.BufferName, args.MinValue, args.MaxValue, args.Levels);
        } catch (emException err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("quantize", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void resample_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        resample_args args = new resample_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        resample_result result = new resample_result();
        try {
          result.Success = iface_.resample(args.BufferName, args.NewLength);
        } catch (emException err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("resample", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void medianFilter_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        medianFilter_args args = new medianFilter_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        medianFilter_result result = new medianFilter_result();
        try {
          result.Success = iface_.medianFilter(args.BufferName, args.FitlerSize);
        } catch (emException err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("medianFilter", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createBuffer_args : TBase
    {
      private long _length;

      /// <summary>
      /// The length
      /// </summary>
      public long Length
      {
        get
        {
          return _length;
        }
        set
        {
          __isset.length = true;
          this._length = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool length;
      }

      public createBuffer_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Length = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createBuffer_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.length) {
          field.Name = "length";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Length);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("createBuffer_args(");
        sb.Append("Length: ");
        sb.Append(Length);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createBuffer_result : TBase
    {
      private string _success;
      private emException _err;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public emException Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          this._err = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public createBuffer_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new emException();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createBuffer_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("createBuffer_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class destroyBuffer_args : TBase
    {
      private string _bufferName;

      /// <summary>
      /// The name of the buffer
      /// </summary>
      public string BufferName
      {
        get
        {
          return _bufferName;
        }
        set
        {
          __isset.bufferName = true;
          this._bufferName = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool bufferName;
      }

      public destroyBuffer_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                BufferName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("destroyBuffer_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (BufferName != null && __isset.bufferName) {
          field.Name = "bufferName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(BufferName);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("destroyBuffer_args(");
        sb.Append("BufferName: ");
        sb.Append(BufferName);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class destroyBuffer_result : TBase
    {
      private emException _err;

      public emException Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          this._err = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public destroyBuffer_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new emException();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("destroyBuffer_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("destroyBuffer_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getBuffer_args : TBase
    {
      private string _bufferName;

      /// <summary>
      /// The name of the buffer
      /// </summary>
      public string BufferName
      {
        get
        {
          return _bufferName;
        }
        set
        {
          __isset.bufferName = true;
          this._bufferName = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool bufferName;
      }

      public getBuffer_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                BufferName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getBuffer_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (BufferName != null && __isset.bufferName) {
          field.Name = "bufferName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(BufferName);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getBuffer_args(");
        sb.Append("BufferName: ");
        sb.Append(BufferName);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getBuffer_result : TBase
    {
      private emWaveForm _success;
      private emException _err;

      public emWaveForm Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public emException Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          this._err = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public getBuffer_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new emWaveForm();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new emException();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getBuffer_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getBuffer_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setBuffer_args : TBase
    {
      private emWaveForm _samples;

      /// <summary>
      /// Existing source
      /// </summary>
      public emWaveForm Samples
      {
        get
        {
          return _samples;
        }
        set
        {
          __isset.samples = true;
          this._samples = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool samples;
      }

      public setBuffer_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Samples = new emWaveForm();
                Samples.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("setBuffer_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Samples != null && __isset.samples) {
          field.Name = "samples";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Samples.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("setBuffer_args(");
        sb.Append("Samples: ");
        sb.Append(Samples== null ? "<null>" : Samples.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setBuffer_result : TBase
    {
      private string _success;
      private emException _err;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public emException Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          this._err = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public setBuffer_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new emException();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("setBuffer_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("setBuffer_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class cloneBuffer_args : TBase
    {
      private string _bufferName;

      public string BufferName
      {
        get
        {
          return _bufferName;
        }
        set
        {
          __isset.bufferName = true;
          this._bufferName = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool bufferName;
      }

      public cloneBuffer_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                BufferName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("cloneBuffer_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (BufferName != null && __isset.bufferName) {
          field.Name = "bufferName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(BufferName);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("cloneBuffer_args(");
        sb.Append("BufferName: ");
        sb.Append(BufferName);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class cloneBuffer_result : TBase
    {
      private string _success;
      private emException _err;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public emException Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          this._err = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public cloneBuffer_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new emException();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("cloneBuffer_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("cloneBuffer_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class renameBuffer_args : TBase
    {
      private string _oldBufferName;
      private string _newBufferName;

      /// <summary>
      /// The buffer to rename
      /// </summary>
      public string OldBufferName
      {
        get
        {
          return _oldBufferName;
        }
        set
        {
          __isset.oldBufferName = true;
          this._oldBufferName = value;
        }
      }

      /// <summary>
      /// The new name
      /// </summary>
      public string NewBufferName
      {
        get
        {
          return _newBufferName;
        }
        set
        {
          __isset.newBufferName = true;
          this._newBufferName = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool oldBufferName;
        public bool newBufferName;
      }

      public renameBuffer_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                OldBufferName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                NewBufferName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("renameBuffer_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (OldBufferName != null && __isset.oldBufferName) {
          field.Name = "oldBufferName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(OldBufferName);
          oprot.WriteFieldEnd();
        }
        if (NewBufferName != null && __isset.newBufferName) {
          field.Name = "newBufferName";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(NewBufferName);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("renameBuffer_args(");
        sb.Append("OldBufferName: ");
        sb.Append(OldBufferName);
        sb.Append(",NewBufferName: ");
        sb.Append(NewBufferName);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class renameBuffer_result : TBase
    {
      private emException _err;

      public emException Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          this._err = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public renameBuffer_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new emException();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("renameBuffer_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("renameBuffer_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class saveBuffer_args : TBase
    {
      private string _bufferName;
      private string _fileName;

      /// <summary>
      /// The buffer name
      /// </summary>
      public string BufferName
      {
        get
        {
          return _bufferName;
        }
        set
        {
          __isset.bufferName = true;
          this._bufferName = value;
        }
      }

      /// <summary>
      /// Where to save it to
      /// </summary>
      public string FileName
      {
        get
        {
          return _fileName;
        }
        set
        {
          __isset.fileName = true;
          this._fileName = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool bufferName;
        public bool fileName;
      }

      public saveBuffer_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                BufferName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                FileName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("saveBuffer_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (BufferName != null && __isset.bufferName) {
          field.Name = "bufferName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(BufferName);
          oprot.WriteFieldEnd();
        }
        if (FileName != null && __isset.fileName) {
          field.Name = "fileName";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(FileName);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("saveBuffer_args(");
        sb.Append("BufferName: ");
        sb.Append(BufferName);
        sb.Append(",FileName: ");
        sb.Append(FileName);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class saveBuffer_result : TBase
    {
      private emException _err;

      public emException Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          this._err = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public saveBuffer_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new emException();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("saveBuffer_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("saveBuffer_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class loadBuffer_args : TBase
    {
      private string _fileName;

      /// <summary>
      /// File containing the buffer
      /// </summary>
      public string FileName
      {
        get
        {
          return _fileName;
        }
        set
        {
          __isset.fileName = true;
          this._fileName = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool fileName;
      }

      public loadBuffer_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                FileName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("loadBuffer_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (FileName != null && __isset.fileName) {
          field.Name = "fileName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(FileName);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("loadBuffer_args(");
        sb.Append("FileName: ");
        sb.Append(FileName);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class loadBuffer_result : TBase
    {
      private string _success;
      private emException _err;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public emException Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          this._err = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public loadBuffer_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new emException();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("loadBuffer_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("loadBuffer_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class absDifference_args : TBase
    {
      private string _bufferA;
      private string _bufferB;

      public string BufferA
      {
        get
        {
          return _bufferA;
        }
        set
        {
          __isset.bufferA = true;
          this._bufferA = value;
        }
      }

      public string BufferB
      {
        get
        {
          return _bufferB;
        }
        set
        {
          __isset.bufferB = true;
          this._bufferB = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool bufferA;
        public bool bufferB;
      }

      public absDifference_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                BufferA = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                BufferB = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("absDifference_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (BufferA != null && __isset.bufferA) {
          field.Name = "bufferA";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(BufferA);
          oprot.WriteFieldEnd();
        }
        if (BufferB != null && __isset.bufferB) {
          field.Name = "bufferB";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(BufferB);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("absDifference_args(");
        sb.Append("BufferA: ");
        sb.Append(BufferA);
        sb.Append(",BufferB: ");
        sb.Append(BufferB);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class absDifference_result : TBase
    {
      private string _success;
      private emException _err;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public emException Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          this._err = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public absDifference_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new emException();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("absDifference_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("absDifference_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class sum_args : TBase
    {
      private string _bufferName;

      public string BufferName
      {
        get
        {
          return _bufferName;
        }
        set
        {
          __isset.bufferName = true;
          this._bufferName = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool bufferName;
      }

      public sum_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                BufferName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("sum_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (BufferName != null && __isset.bufferName) {
          field.Name = "bufferName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(BufferName);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("sum_args(");
        sb.Append("BufferName: ");
        sb.Append(BufferName);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class sum_result : TBase
    {
      private double _success;
      private emException _err;

      public double Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public emException Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          this._err = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public sum_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Double) {
                Success = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new emException();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("sum_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Double;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("sum_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class sumSquaredDifference_args : TBase
    {
      private string _bufferA;
      private string _bufferB;

      public string BufferA
      {
        get
        {
          return _bufferA;
        }
        set
        {
          __isset.bufferA = true;
          this._bufferA = value;
        }
      }

      public string BufferB
      {
        get
        {
          return _bufferB;
        }
        set
        {
          __isset.bufferB = true;
          this._bufferB = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool bufferA;
        public bool bufferB;
      }

      public sumSquaredDifference_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                BufferA = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                BufferB = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("sumSquaredDifference_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (BufferA != null && __isset.bufferA) {
          field.Name = "bufferA";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(BufferA);
          oprot.WriteFieldEnd();
        }
        if (BufferB != null && __isset.bufferB) {
          field.Name = "bufferB";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(BufferB);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("sumSquaredDifference_args(");
        sb.Append("BufferA: ");
        sb.Append(BufferA);
        sb.Append(",BufferB: ");
        sb.Append(BufferB);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class sumSquaredDifference_result : TBase
    {
      private double _success;
      private emException _err;

      public double Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public emException Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          this._err = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public sumSquaredDifference_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Double) {
                Success = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new emException();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("sumSquaredDifference_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Double;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("sumSquaredDifference_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class subtract_args : TBase
    {
      private string _bufferA;
      private string _bufferB;

      public string BufferA
      {
        get
        {
          return _bufferA;
        }
        set
        {
          __isset.bufferA = true;
          this._bufferA = value;
        }
      }

      public string BufferB
      {
        get
        {
          return _bufferB;
        }
        set
        {
          __isset.bufferB = true;
          this._bufferB = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool bufferA;
        public bool bufferB;
      }

      public subtract_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                BufferA = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                BufferB = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("subtract_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (BufferA != null && __isset.bufferA) {
          field.Name = "bufferA";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(BufferA);
          oprot.WriteFieldEnd();
        }
        if (BufferB != null && __isset.bufferB) {
          field.Name = "bufferB";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(BufferB);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("subtract_args(");
        sb.Append("BufferA: ");
        sb.Append(BufferA);
        sb.Append(",BufferB: ");
        sb.Append(BufferB);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class subtract_result : TBase
    {
      private string _success;
      private emException _err;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public emException Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          this._err = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public subtract_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new emException();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("subtract_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("subtract_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class add_args : TBase
    {
      private string _bufferA;
      private string _bufferB;

      public string BufferA
      {
        get
        {
          return _bufferA;
        }
        set
        {
          __isset.bufferA = true;
          this._bufferA = value;
        }
      }

      public string BufferB
      {
        get
        {
          return _bufferB;
        }
        set
        {
          __isset.bufferB = true;
          this._bufferB = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool bufferA;
        public bool bufferB;
      }

      public add_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                BufferA = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                BufferB = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("add_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (BufferA != null && __isset.bufferA) {
          field.Name = "bufferA";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(BufferA);
          oprot.WriteFieldEnd();
        }
        if (BufferB != null && __isset.bufferB) {
          field.Name = "bufferB";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(BufferB);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("add_args(");
        sb.Append("BufferA: ");
        sb.Append(BufferA);
        sb.Append(",BufferB: ");
        sb.Append(BufferB);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class add_result : TBase
    {
      private string _success;
      private emException _err;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public emException Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          this._err = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public add_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new emException();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("add_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("add_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setValues_args : TBase
    {
      private string _bufferName;
      private int _value;

      /// <summary>
      /// Buffer name
      /// </summary>
      public string BufferName
      {
        get
        {
          return _bufferName;
        }
        set
        {
          __isset.bufferName = true;
          this._bufferName = value;
        }
      }

      /// <summary>
      /// New value
      /// </summary>
      public int Value
      {
        get
        {
          return _value;
        }
        set
        {
          __isset.value = true;
          this._value = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool bufferName;
        public bool value;
      }

      public setValues_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                BufferName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Value = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("setValues_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (BufferName != null && __isset.bufferName) {
          field.Name = "bufferName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(BufferName);
          oprot.WriteFieldEnd();
        }
        if (__isset.value) {
          field.Name = "value";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Value);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("setValues_args(");
        sb.Append("BufferName: ");
        sb.Append(BufferName);
        sb.Append(",Value: ");
        sb.Append(Value);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setValues_result : TBase
    {
      private emException _err;

      public emException Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          this._err = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err;
      }

      public setValues_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err = new emException();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("setValues_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("setValues_result(");
        sb.Append("Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class threshold_args : TBase
    {
      private string _bufferName;
      private int _thresholdValue;
      private int _maxValue;
      private bool _invert;

      /// <summary>
      /// Buffer name
      /// </summary>
      public string BufferName
      {
        get
        {
          return _bufferName;
        }
        set
        {
          __isset.bufferName = true;
          this._bufferName = value;
        }
      }

      /// <summary>
      /// Value to test against
      /// </summary>
      public int ThresholdValue
      {
        get
        {
          return _thresholdValue;
        }
        set
        {
          __isset.thresholdValue = true;
          this._thresholdValue = value;
        }
      }

      /// <summary>
      /// Value to set if condition is met
      /// </summary>
      public int MaxValue
      {
        get
        {
          return _maxValue;
        }
        set
        {
          __isset.maxValue = true;
          this._maxValue = value;
        }
      }

      /// <summary>
      /// Invert response
      /// </summary>
      public bool Invert
      {
        get
        {
          return _invert;
        }
        set
        {
          __isset.invert = true;
          this._invert = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool bufferName;
        public bool thresholdValue;
        public bool maxValue;
        public bool invert;
      }

      public threshold_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                BufferName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                ThresholdValue = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                MaxValue = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Bool) {
                Invert = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("threshold_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (BufferName != null && __isset.bufferName) {
          field.Name = "bufferName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(BufferName);
          oprot.WriteFieldEnd();
        }
        if (__isset.thresholdValue) {
          field.Name = "thresholdValue";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ThresholdValue);
          oprot.WriteFieldEnd();
        }
        if (__isset.maxValue) {
          field.Name = "maxValue";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(MaxValue);
          oprot.WriteFieldEnd();
        }
        if (__isset.invert) {
          field.Name = "invert";
          field.Type = TType.Bool;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Invert);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("threshold_args(");
        sb.Append("BufferName: ");
        sb.Append(BufferName);
        sb.Append(",ThresholdValue: ");
        sb.Append(ThresholdValue);
        sb.Append(",MaxValue: ");
        sb.Append(MaxValue);
        sb.Append(",Invert: ");
        sb.Append(Invert);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class threshold_result : TBase
    {
      private string _success;
      private emException _err;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public emException Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          this._err = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public threshold_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new emException();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("threshold_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("threshold_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class normalize_args : TBase
    {
      private string _bufferName;
      private int _minValue;
      private int _maxValue;

      /// <summary>
      /// Buffer name
      /// </summary>
      public string BufferName
      {
        get
        {
          return _bufferName;
        }
        set
        {
          __isset.bufferName = true;
          this._bufferName = value;
        }
      }

      /// <summary>
      /// Normalize from
      /// </summary>
      public int MinValue
      {
        get
        {
          return _minValue;
        }
        set
        {
          __isset.minValue = true;
          this._minValue = value;
        }
      }

      /// <summary>
      /// Normalize to
      /// </summary>
      public int MaxValue
      {
        get
        {
          return _maxValue;
        }
        set
        {
          __isset.maxValue = true;
          this._maxValue = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool bufferName;
        public bool minValue;
        public bool maxValue;
      }

      public normalize_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                BufferName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                MinValue = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                MaxValue = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("normalize_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (BufferName != null && __isset.bufferName) {
          field.Name = "bufferName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(BufferName);
          oprot.WriteFieldEnd();
        }
        if (__isset.minValue) {
          field.Name = "minValue";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(MinValue);
          oprot.WriteFieldEnd();
        }
        if (__isset.maxValue) {
          field.Name = "maxValue";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(MaxValue);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("normalize_args(");
        sb.Append("BufferName: ");
        sb.Append(BufferName);
        sb.Append(",MinValue: ");
        sb.Append(MinValue);
        sb.Append(",MaxValue: ");
        sb.Append(MaxValue);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class normalize_result : TBase
    {
      private string _success;
      private emException _err;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public emException Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          this._err = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public normalize_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new emException();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("normalize_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("normalize_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class quantize_args : TBase
    {
      private string _bufferName;
      private int _minValue;
      private int _maxValue;
      private int _levels;

      /// <summary>
      /// Buffer name
      /// </summary>
      public string BufferName
      {
        get
        {
          return _bufferName;
        }
        set
        {
          __isset.bufferName = true;
          this._bufferName = value;
        }
      }

      /// <summary>
      /// Normalize from
      /// </summary>
      public int MinValue
      {
        get
        {
          return _minValue;
        }
        set
        {
          __isset.minValue = true;
          this._minValue = value;
        }
      }

      /// <summary>
      /// Normalize to
      /// </summary>
      public int MaxValue
      {
        get
        {
          return _maxValue;
        }
        set
        {
          __isset.maxValue = true;
          this._maxValue = value;
        }
      }

      /// <summary>
      /// How many discrete levels to quantize to
      /// </summary>
      public int Levels
      {
        get
        {
          return _levels;
        }
        set
        {
          __isset.levels = true;
          this._levels = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool bufferName;
        public bool minValue;
        public bool maxValue;
        public bool levels;
      }

      public quantize_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                BufferName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                MinValue = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                MaxValue = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Levels = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("quantize_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (BufferName != null && __isset.bufferName) {
          field.Name = "bufferName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(BufferName);
          oprot.WriteFieldEnd();
        }
        if (__isset.minValue) {
          field.Name = "minValue";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(MinValue);
          oprot.WriteFieldEnd();
        }
        if (__isset.maxValue) {
          field.Name = "maxValue";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(MaxValue);
          oprot.WriteFieldEnd();
        }
        if (__isset.levels) {
          field.Name = "levels";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Levels);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("quantize_args(");
        sb.Append("BufferName: ");
        sb.Append(BufferName);
        sb.Append(",MinValue: ");
        sb.Append(MinValue);
        sb.Append(",MaxValue: ");
        sb.Append(MaxValue);
        sb.Append(",Levels: ");
        sb.Append(Levels);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class quantize_result : TBase
    {
      private string _success;
      private emException _err;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public emException Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          this._err = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public quantize_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new emException();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("quantize_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("quantize_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class resample_args : TBase
    {
      private string _bufferName;
      private int _newLength;

      /// <summary>
      /// Buffer name
      /// </summary>
      public string BufferName
      {
        get
        {
          return _bufferName;
        }
        set
        {
          __isset.bufferName = true;
          this._bufferName = value;
        }
      }

      /// <summary>
      /// Number of samples in returned buffer
      /// </summary>
      public int NewLength
      {
        get
        {
          return _newLength;
        }
        set
        {
          __isset.newLength = true;
          this._newLength = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool bufferName;
        public bool newLength;
      }

      public resample_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                BufferName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                NewLength = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("resample_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (BufferName != null && __isset.bufferName) {
          field.Name = "bufferName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(BufferName);
          oprot.WriteFieldEnd();
        }
        if (__isset.newLength) {
          field.Name = "newLength";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NewLength);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("resample_args(");
        sb.Append("BufferName: ");
        sb.Append(BufferName);
        sb.Append(",NewLength: ");
        sb.Append(NewLength);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class resample_result : TBase
    {
      private string _success;
      private emException _err;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public emException Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          this._err = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public resample_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new emException();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("resample_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("resample_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class medianFilter_args : TBase
    {
      private string _bufferName;
      private int _fitlerSize;

      /// <summary>
      /// Buffer name
      /// </summary>
      public string BufferName
      {
        get
        {
          return _bufferName;
        }
        set
        {
          __isset.bufferName = true;
          this._bufferName = value;
        }
      }

      /// <summary>
      /// Strength of the filter. Larger number is stronger. Must be >=1
      /// </summary>
      public int FitlerSize
      {
        get
        {
          return _fitlerSize;
        }
        set
        {
          __isset.fitlerSize = true;
          this._fitlerSize = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool bufferName;
        public bool fitlerSize;
      }

      public medianFilter_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                BufferName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                FitlerSize = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("medianFilter_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (BufferName != null && __isset.bufferName) {
          field.Name = "bufferName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(BufferName);
          oprot.WriteFieldEnd();
        }
        if (__isset.fitlerSize) {
          field.Name = "fitlerSize";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(FitlerSize);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("medianFilter_args(");
        sb.Append("BufferName: ");
        sb.Append(BufferName);
        sb.Append(",FitlerSize: ");
        sb.Append(FitlerSize);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class medianFilter_result : TBase
    {
      private string _success;
      private emException _err;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public emException Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          this._err = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public medianFilter_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new emException();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("medianFilter_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("medianFilter_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
