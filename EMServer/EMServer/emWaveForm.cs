/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace emInterfaces
{

  /// <summary>
  /// Structure for an arbitrary wave form.
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class emWaveForm : TBase
  {
    private List<int> _Samples;
    private int _Rate;
    private int _SampleCount;

    /// <summary>
    /// Buffer holding the values
    /// </summary>
    public List<int> Samples
    {
      get
      {
        return _Samples;
      }
      set
      {
        __isset.Samples = true;
        this._Samples = value;
      }
    }

    /// <summary>
    /// Playback rate
    /// </summary>
    public int Rate
    {
      get
      {
        return _Rate;
      }
      set
      {
        __isset.Rate = true;
        this._Rate = value;
      }
    }

    /// <summary>
    /// Length of the buffer
    /// </summary>
    public int SampleCount
    {
      get
      {
        return _SampleCount;
      }
      set
      {
        __isset.SampleCount = true;
        this._SampleCount = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Samples;
      public bool Rate;
      public bool SampleCount;
    }

    public emWaveForm() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                Samples = new List<int>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  int _elem2 = 0;
                  _elem2 = iprot.ReadI32();
                  Samples.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Rate = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              SampleCount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("emWaveForm");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Samples != null && __isset.Samples) {
        field.Name = "Samples";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, Samples.Count));
          foreach (int _iter3 in Samples)
          {
            oprot.WriteI32(_iter3);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.Rate) {
        field.Name = "Rate";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Rate);
        oprot.WriteFieldEnd();
      }
      if (__isset.SampleCount) {
        field.Name = "SampleCount";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SampleCount);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("emWaveForm(");
      sb.Append("Samples: ");
      sb.Append(Samples);
      sb.Append(",Rate: ");
      sb.Append(Rate);
      sb.Append(",SampleCount: ");
      sb.Append(SampleCount);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
