This is a description of the protocol that Mecobo understands.

The packet that goes across the USB interface is structured like this:

-----------------------------------
| Field name		  | Bytes | 
===================================
| Mecobo Packet ID	  | 4	  |
-----------------------------------
| Size of data field 	  | 4	  |
-----------------------------------
| Command 		  | 4     | 
-----------------------------------
| Data			  | 4     |
-----------------------------------
| Padding (32b boundry)   | ?	  |
===================================

The intent is that one of these packets corresponds to one 'tick' of the
sequencer that is used to control the higher-level waves that are applied to
Mecobo. Mecobo recieves and buffers these packets, and will consume 1 packet on
each tick. Likewise, it will store 1 of these packets in a return queue, which
should be read from the host before the buffer is full.

= The Command Field =
Possible values: 
NOOP 		(0x1)
PINCONFIG 	(0x2)
PINDATA 	(0X3)
PINVALUES	(0x4)
STATUS		(0x5)


= Data fields =
The format of the data field depends on the command field.

- NOOP -
Data field is size 0. Do nothing. 

- PINCONFIG -
Consists of one 4-bit field per pin, giving how the pins are to be set up. The
possible values are:
0: digital input
1: digital output
2: DAC output (the pin is used to control an external DAC)
3: ADC input (the pin is used to control an ADC)

When a pin has been set to a function, this function will be used to parse the
data field of a PINDATA command packet.

- PINDATA - 
Consists of nOutput (digital output + DAC output) fields, linearly ordered such that field 0 corresponds to pin 0, 1 to 1, etc.

Each field is 12 bits. Attempting to set a value of not 0 or 1 to a pin typed
as digital output will result in error.

- PINVALUES -
Consists of nInput (digital input + ADC input) fields, linearly ordered as PINDATA.

Each field is 12 bits. 
